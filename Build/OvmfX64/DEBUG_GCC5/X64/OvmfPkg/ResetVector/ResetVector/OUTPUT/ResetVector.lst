     1                                  ;------------------------------------------------------------------------------
     2                                  ; @file
     3                                  ; This file includes all other code files to assemble the reset vector code
     4                                  ;
     5                                  ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                                  ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                                  ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                                  ;
     9                                  ;------------------------------------------------------------------------------
    10                                  
    11                                  ;
    12                                  ; If neither ARCH_IA32 nor ARCH_X64 are defined, then try to include
    13                                  ; Base.h to use the C pre-processor to determine the architecture.
    14                                  ;
    15                                  %ifndef ARCH_IA32
    16                                    %ifndef ARCH_X64
    17                                  
    18                                  
    19                                  
    20                                  
    21                                        %define ARCH_X64
    22                                  
    23                                    %endif
    24                                  %endif
    25                                  
    26                                  %ifdef ARCH_IA32
    27                                    %ifdef ARCH_X64
    28                                      %error "Only one of ARCH_IA32 or ARCH_X64 can be defined."
    29                                    %endif
    30                                  %elifdef ARCH_X64
    31                                  %else
    32                                    %error "Either ARCH_IA32 or ARCH_X64 must be defined."
    33                                  %endif
    34                                  
    35                                  %include "CommonMacros.inc"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Common macros used in the ResetVector VTF module.
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define ADDR16_OF(x) (0x10000 - fourGigabytes + x)
    11                              <1> %define ADDR_OF(x) (0x100000000 - fourGigabytes + x)
    12                              <1> 
    13                              <1> %macro  OneTimeCall 1
    14                              <1>     jmp     %1
    15                              <1> %1 %+ OneTimerCallReturn:
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro  OneTimeCallRet 1
    19                              <1>     jmp     %1 %+ OneTimerCallReturn
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> StartOfResetVectorCode:
    23                              <1> 
    24                              <1> %define ADDR_OF_START_OF_RESET_CODE ADDR_OF(StartOfResetVectorCode)
    25                              <1> 
    36                                  
    37                                  %include "PostCodes.inc"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Definitions of POST CODES for the reset vector module
     4                              <1> ;
     5                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define POSTCODE_16BIT_MODE     0x16
    11                              <1> %define POSTCODE_32BIT_MODE     0x32
    12                              <1> %define POSTCODE_64BIT_MODE     0x64
    13                              <1> 
    14                              <1> %define POSTCODE_BFV_NOT_FOUND  0xb0
    15                              <1> %define POSTCODE_BFV_FOUND      0xb1
    16                              <1> 
    17                              <1> %define POSTCODE_SEC_NOT_FOUND  0xf0
    18                              <1> %define POSTCODE_SEC_FOUND      0xf1
    19                              <1> 
    38                                  
    39                                  %ifdef DEBUG_PORT80
    40                                    %include "Port80Debug.asm"
    41                                  %elifdef DEBUG_SERIAL
    42                                    %include "SerialDebug.asm"
    43                                  %else
    44                                    %include "DebugDisabled.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Debug disabled
     4                              <1> ;
     5                              <1> ; Copyright (c) 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    16
    11                              <1> 
    12                              <1> %macro  debugInitialize 0
    13                              <1>     ;
    14                              <1>     ; No initialization is required
    15                              <1>     ;
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro  debugShowPostCode 1
    19                              <1> %endmacro
    20                              <1> 
    45                                  %endif
    46                                  
    47                                  %include "Ia32/SearchForBfvBase.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Search for the Boot Firmware Volume (BFV) base address
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    11                              <1> ;#define EFI_FIRMWARE_FILE_SYSTEM2_GUID ;  { 0x8c8ce578, 0x8a3d, 0x4f1c, { 0x99, 0x35, 0x89, 0x61, 0x85, 0xc3, 0x2d, 0xd3 } }
    12                              <1> %define FFS_GUID_DWORD0 0x8c8ce578
    13                              <1> %define FFS_GUID_DWORD1 0x4f1c8a3d
    14                              <1> %define FFS_GUID_DWORD2 0x61893599
    15                              <1> %define FFS_GUID_DWORD3 0xd32dc385
    16                              <1> 
    17                              <1> BITS    32
    18                              <1> 
    19                              <1> ;
    20                              <1> ; Modified:  EAX, EBX
    21                              <1> ; Preserved: EDI, ESP
    22                              <1> ;
    23                              <1> ; @param[out]  EBP  Address of Boot Firmware Volume (BFV)
    24                              <1> ;
    25                              <1> Flat32SearchForBfvBase:
    26                              <1> 
    27 00000000 31C0                <1>     xor     eax, eax
    28                              <1> searchingForBfvHeaderLoop:
    29                              <1>     ;
    30                              <1>     ; We check for a firmware volume at every 4KB address in the top 16MB
    31                              <1>     ; just below 4GB.  (Addresses at 0xffHHH000 where H is any hex digit.)
    32                              <1>     ;
    33 00000002 2D00100000          <1>     sub     eax, 0x1000
    34 00000007 3D000000FF          <1>     cmp     eax, 0xff000000
    35 0000000C 7233                <1>     jb      searchedForBfvHeaderButNotFound
    36                              <1> 
    37                              <1>     ;
    38                              <1>     ; Check FFS GUID
    39                              <1>     ;
    40 0000000E 81781078E58C8C      <1>     cmp     dword [eax + 0x10], FFS_GUID_DWORD0
    41 00000015 75EB                <1>     jne     searchingForBfvHeaderLoop
    42 00000017 8178143D8A1C4F      <1>     cmp     dword [eax + 0x14], FFS_GUID_DWORD1
    43 0000001E 75E2                <1>     jne     searchingForBfvHeaderLoop
    44 00000020 81781899358961      <1>     cmp     dword [eax + 0x18], FFS_GUID_DWORD2
    45 00000027 75D9                <1>     jne     searchingForBfvHeaderLoop
    46 00000029 81781C85C32DD3      <1>     cmp     dword [eax + 0x1c], FFS_GUID_DWORD3
    47 00000030 75D0                <1>     jne     searchingForBfvHeaderLoop
    48                              <1> 
    49                              <1>     ;
    50                              <1>     ; Check FV Length
    51                              <1>     ;
    52 00000032 83782400            <1>     cmp     dword [eax + 0x24], 0
    53 00000036 75CA                <1>     jne     searchingForBfvHeaderLoop
    54 00000038 89C3                <1>     mov     ebx, eax
    55 0000003A 035820              <1>     add     ebx, dword [eax + 0x20]
    56 0000003D 75C3                <1>     jnz     searchingForBfvHeaderLoop
    57                              <1> 
    58 0000003F EB09                <1>     jmp     searchedForBfvHeaderAndItWasFound
    59                              <1> 
    60                              <1> searchedForBfvHeaderButNotFound:
    61                              <1>     ;
    62                              <1>     ; Hang if the SEC entry point was not found
    63                              <1>     ;
    64                              <1>     debugShowPostCode POSTCODE_BFV_NOT_FOUND
    65                              <1> 
    66                              <1>     ;
    67                              <1>     ; 0xbfbfbfbf in the EAX & EBP registers helps signal what failed
    68                              <1>     ; for debugging purposes.
    69                              <1>     ;
    70 00000041 B8BFBFBFBF          <1>     mov     eax, 0xBFBFBFBF
    71 00000046 89C5                <1>     mov     ebp, eax
    72 00000048 EBFE                <1>     jmp     $
    73                              <1> 
    74                              <1> searchedForBfvHeaderAndItWasFound:
    75 0000004A 89C5                <1>     mov     ebp, eax
    76                              <1> 
    77                              <1>     debugShowPostCode POSTCODE_BFV_FOUND
    78                              <1> 
    79                              <1>     OneTimeCallRet Flat32SearchForBfvBase
    79 0000004C E93D080000          <2>  jmp %1 %+ OneTimerCallReturn
    80                              <1> 
    48                                  %include "Ia32/SearchForSecEntry.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Search for the SEC Core entry point
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2011, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    32
    11                              <1> 
    12                              <1> %define EFI_FV_FILETYPE_SECURITY_CORE         0x03
    13                              <1> 
    14                              <1> ;
    15                              <1> ; Modified:  EAX, EBX, ECX, EDX
    16                              <1> ; Preserved: EDI, EBP, ESP
    17                              <1> ;
    18                              <1> ; @param[in]   EBP  Address of Boot Firmware Volume (BFV)
    19                              <1> ; @param[out]  ESI  SEC Core Entry Point Address
    20                              <1> ;
    21                              <1> Flat32SearchForSecEntryPoint:
    22                              <1> 
    23                              <1>     ;
    24                              <1>     ; Initialize EBP and ESI to 0
    25                              <1>     ;
    26 00000051 31DB                <1>     xor     ebx, ebx
    27 00000053 89DE                <1>     mov     esi, ebx
    28                              <1> 
    29                              <1>     ;
    30                              <1>     ; Pass over the BFV header
    31                              <1>     ;
    32 00000055 89E8                <1>     mov     eax, ebp
    33 00000057 668B5D30            <1>     mov     bx, [ebp + 0x30]
    34 0000005B 01D8                <1>     add     eax, ebx
    35 0000005D 723B                <1>     jc      secEntryPointWasNotFound
    36                              <1> 
    37 0000005F EB03                <1>     jmp     searchingForFfsFileHeaderLoop
    38                              <1> 
    39                              <1> moveForwardWhileSearchingForFfsFileHeaderLoop:
    40                              <1>     ;
    41                              <1>     ; Make forward progress in the search
    42                              <1>     ;
    43 00000061 40                  <1>     inc     eax
    44 00000062 7236                <1>     jc      secEntryPointWasNotFound
    45                              <1> 
    46                              <1> searchingForFfsFileHeaderLoop:
    47 00000064 85C0                <1>     test    eax, eax
    48 00000066 7432                <1>     jz      secEntryPointWasNotFound
    49                              <1> 
    50                              <1>     ;
    51                              <1>     ; Ensure 8 byte alignment
    52                              <1>     ;
    53 00000068 83C007              <1>     add     eax, 7
    54 0000006B 722D                <1>     jc      secEntryPointWasNotFound
    55 0000006D 24F8                <1>     and     al, 0xf8
    56                              <1> 
    57                              <1>     ;
    58                              <1>     ; Look to see if there is an FFS file at eax
    59                              <1>     ;
    60 0000006F 8A5817              <1>     mov     bl, [eax + 0x17]
    61 00000072 F6C320              <1>     test    bl, 0x20
    62 00000075 74EA                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
    63 00000077 8B4814              <1>     mov     ecx, [eax + 0x14]
    64 0000007A 81E1FFFFFF00        <1>     and     ecx, 0x00ffffff
    65 00000080 09C9                <1>     or      ecx, ecx
    66 00000082 74DD                <1>     jz      moveForwardWhileSearchingForFfsFileHeaderLoop
    67 00000084 01C1                <1>     add     ecx, eax
    68 00000086 7402                <1>     jz      jumpSinceWeFoundTheLastFfsFile
    69 00000088 72D7                <1>     jc      moveForwardWhileSearchingForFfsFileHeaderLoop
    70                              <1> jumpSinceWeFoundTheLastFfsFile:
    71                              <1> 
    72                              <1>     ;
    73                              <1>     ; There seems to be a valid file at eax
    74                              <1>     ;
    75 0000008A 80781203            <1>     cmp     byte [eax + 0x12], EFI_FV_FILETYPE_SECURITY_CORE ; Check File Type
    76 0000008E 7506                <1>     jne     readyToTryFfsFileAtEcx
    77                              <1> 
    78                              <1> fileTypeIsSecCore:
    79                              <1>     OneTimeCall GetEntryPointOfFfsFile
    79 00000090 EB17                <2>  jmp %1
    79                              <2> %1 %+ OneTimerCallReturn:
    80 00000092 85C0                <1>     test    eax, eax
    81 00000094 7506                <1>     jnz     doneSeachingForSecEntryPoint
    82                              <1> 
    83                              <1> readyToTryFfsFileAtEcx:
    84                              <1>     ;
    85                              <1>     ; Try the next FFS file at ECX
    86                              <1>     ;
    87 00000096 89C8                <1>     mov     eax, ecx
    88 00000098 EBCA                <1>     jmp     searchingForFfsFileHeaderLoop
    89                              <1> 
    90                              <1> secEntryPointWasNotFound:
    91 0000009A 31C0                <1>     xor     eax, eax
    92                              <1> 
    93                              <1> doneSeachingForSecEntryPoint:
    94 0000009C 89C6                <1>     mov     esi, eax
    95                              <1> 
    96 0000009E 85F6                <1>     test    esi, esi
    97 000000A0 7502                <1>     jnz     secCoreEntryPointWasFound
    98                              <1> 
    99                              <1> secCoreEntryPointWasNotFound:
   100                              <1>     ;
   101                              <1>     ; Hang if the SEC entry point was not found
   102                              <1>     ;
   103                              <1>     debugShowPostCode POSTCODE_SEC_NOT_FOUND
   104 000000A2 74FE                <1>     jz      $
   105                              <1> 
   106                              <1> secCoreEntryPointWasFound:
   107                              <1>     debugShowPostCode POSTCODE_SEC_FOUND
   108                              <1> 
   109                              <1>     OneTimeCallRet Flat32SearchForSecEntryPoint
   109 000000A4 E9EA070000          <2>  jmp %1 %+ OneTimerCallReturn
   110                              <1> 
   111                              <1> %define EFI_SECTION_PE32                  0x10
   112                              <1> %define EFI_SECTION_TE                    0x12
   113                              <1> 
   114                              <1> ;
   115                              <1> ; Input:
   116                              <1> ;   EAX - Start of FFS file
   117                              <1> ;   ECX - End of FFS file
   118                              <1> ;
   119                              <1> ; Output:
   120                              <1> ;   EAX - Entry point of PE32 (or 0 if not found)
   121                              <1> ;
   122                              <1> ; Modified:
   123                              <1> ;   EBX
   124                              <1> ;
   125                              <1> GetEntryPointOfFfsFile:
   126 000000A9 85C0                <1>     test    eax, eax
   127 000000AB 745F                <1>     jz      getEntryPointOfFfsFileErrorReturn
   128 000000AD 83C018              <1>     add     eax, 0x18       ; EAX = Start of section
   129                              <1> 
   130                              <1> getEntryPointOfFfsFileLoopForSections:
   131 000000B0 39C8                <1>     cmp     eax, ecx
   132 000000B2 7358                <1>     jae     getEntryPointOfFfsFileErrorReturn
   133                              <1> 
   134 000000B4 80780310            <1>     cmp     byte [eax + 3], EFI_SECTION_PE32
   135 000000B8 741B                <1>     je      getEntryPointOfFfsFileFoundPe32Section
   136                              <1> 
   137 000000BA 80780312            <1>     cmp     byte [eax + 3], EFI_SECTION_TE
   138 000000BE 7432                <1>     je      getEntryPointOfFfsFileFoundTeSection
   139                              <1> 
   140                              <1>     ;
   141                              <1>     ; The section type was not PE32 or TE, so move to next section
   142                              <1>     ;
   143 000000C0 8B18                <1>     mov     ebx, dword [eax]
   144 000000C2 81E3FFFFFF00        <1>     and     ebx, 0x00ffffff
   145 000000C8 01D8                <1>     add     eax, ebx
   146 000000CA 7240                <1>     jc      getEntryPointOfFfsFileErrorReturn
   147                              <1> 
   148                              <1>     ;
   149                              <1>     ; Ensure that FFS section is 32-bit aligned
   150                              <1>     ;
   151 000000CC 83C003              <1>     add     eax, 3
   152 000000CF 723B                <1>     jc      getEntryPointOfFfsFileErrorReturn
   153 000000D1 24FC                <1>     and     al, 0xfc
   154 000000D3 EBDB                <1>     jmp     getEntryPointOfFfsFileLoopForSections
   155                              <1> 
   156                              <1> getEntryPointOfFfsFileFoundPe32Section:
   157 000000D5 83C004              <1>     add     eax, 4       ; EAX = Start of PE32 image
   158                              <1> 
   159 000000D8 6681384D5A          <1>     cmp     word [eax], 'MZ'
   160 000000DD 752D                <1>     jne     getEntryPointOfFfsFileErrorReturn
   161 000000DF 0FB7583C            <1>     movzx   ebx, word [eax + 0x3c]
   162 000000E3 01C3                <1>     add     ebx, eax
   163                              <1> 
   164                              <1>     ; if (Hdr.Pe32->Signature == EFI_IMAGE_NT_SIGNATURE)
   165 000000E5 813B50450000        <1>     cmp     dword [ebx], `PE\x00\x00`
   166 000000EB 751F                <1>     jne     getEntryPointOfFfsFileErrorReturn
   167                              <1> 
   168                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   169                              <1>     ;   (UINTN)(Hdr.Pe32->OptionalHeader.AddressOfEntryPoint & 0x0ffffffff));
   170 000000ED 034328              <1>     add     eax, [ebx + 0x4 + 0x14 + 0x10]
   171 000000F0 EB1F                <1>     jmp     getEntryPointOfFfsFileReturn
   172                              <1> 
   173                              <1> getEntryPointOfFfsFileFoundTeSection:
   174 000000F2 83C004              <1>     add     eax, 4       ; EAX = Start of TE image
   175 000000F5 89C3                <1>     mov     ebx, eax
   176                              <1> 
   177                              <1>     ; if (Hdr.Te->Signature == EFI_TE_IMAGE_HEADER_SIGNATURE)
   178 000000F7 66813B565A          <1>     cmp     word [ebx], 'VZ'
   179 000000FC 750E                <1>     jne     getEntryPointOfFfsFileErrorReturn
   180                              <1>     ; *EntryPoint = (VOID *)((UINTN)Pe32Data +
   181                              <1>     ;   (UINTN)(Hdr.Te->AddressOfEntryPoint & 0x0ffffffff) +
   182                              <1>     ;   sizeof(EFI_TE_IMAGE_HEADER) - Hdr.Te->StrippedSize);
   183 000000FE 034308              <1>     add     eax, [ebx + 0x8]
   184 00000101 83C028              <1>     add     eax, 0x28
   185 00000104 0FB75B06            <1>     movzx   ebx, word [ebx + 0x6]
   186 00000108 29D8                <1>     sub     eax, ebx
   187 0000010A EB05                <1>     jmp     getEntryPointOfFfsFileReturn
   188                              <1> 
   189                              <1> getEntryPointOfFfsFileErrorReturn:
   190 0000010C B800000000          <1>     mov     eax, 0
   191                              <1> 
   192                              <1> getEntryPointOfFfsFileReturn:
   193                              <1>     OneTimeCallRet GetEntryPointOfFfsFile
   193 00000111 E97CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   194                              <1> 
    49                                  
    50                                  %define WORK_AREA_GUEST_TYPE (00080B000h)
    51                                  
    52                                  %ifdef ARCH_X64
    53                                  
    54                                  
    55                                    %if (000006000h != 06000h)
    56                                      %error "This implementation inherently depends on PcdOvmfSecPageTablesSize"
    57                                    %endif
    58                                  
    59                                    %if (000001000h != 01000h)
    60                                      %error "This implementation inherently depends on PcdOvmfSecGhcbPageTableSize"
    61                                    %endif
    62                                  
    63                                    %if (000002000h != 02000h)
    64                                      %error "This implementation inherently depends on PcdOvmfSecGhcbSize"
    65                                    %endif
    66                                  
    67                                    %if ((000809000h >> 21) != ((000809000h + 000002000h - 1) >> 21))
    68                                  
    69                                      %error "This implementation inherently depends on PcdOvmfSecGhcbBase not straddling a 2MB boundary"
    70                                    %endif
    71                                  
    72                                    %define TDX_BFV_RAW_DATA_OFFSET 084000h
    73                                    %define TDX_BFV_RAW_DATA_SIZE 00037C000h
    74                                    %define TDX_BFV_MEMORY_BASE 0FFC84000h
    75                                    %define TDX_BFV_MEMORY_SIZE 00037C000h
    76                                  
    77                                    %define TDX_CFV_RAW_DATA_OFFSET 0
    78                                    %define TDX_CFV_RAW_DATA_SIZE 084000h
    79                                    %define TDX_CFV_MEMORY_BASE 0FFC00000h,
    80                                    %define TDX_CFV_MEMORY_SIZE 084000h,
    81                                  
    82                                    %define TDX_HEAP_STACK_BASE 000810000h
    83                                    %define TDX_HEAP_STACK_SIZE 000010000h
    84                                  
    85                                    %define TDX_HOB_MEMORY_BASE 000809000h
    86                                    %define TDX_HOB_MEMORY_SIZE 000002000h
    87                                  
    88                                    %define TDX_INIT_MEMORY_BASE 00080B000h
    89                                    %define TDX_INIT_MEMORY_SIZE (000001000h + 000001000h)
    90                                  
    91                                    %define OVMF_PAGE_TABLE_BASE 000800000h
    92                                    %define OVMF_PAGE_TABLE_SIZE 000006000h
    93                                  
    94                                    %define TDX_WORK_AREA_PGTBL_READY (00080B000h + 4)
    95                                    %define TDX_WORK_AREA_GPAW (00080B000h + 8)
    96                                  
    97                                    %define PT_ADDR(Offset) (000800000h + (Offset))
    98                                  
    99                                    %define GHCB_PT_ADDR (000808000h)
   100                                    %define GHCB_BASE (000809000h)
   101                                    %define GHCB_SIZE (000002000h)
   102                                    %define SEV_ES_WORK_AREA (8433668)
   103                                    %define SEV_ES_WORK_AREA_RDRAND (8433668 + 8)
   104                                    %define SEV_ES_WORK_AREA_ENC_MASK (8433668 + 16)
   105                                    %define SEV_ES_VC_TOP_OF_STACK (000810000h + 000010000h)
   106                                    %define SEV_SNP_SECRETS_BASE (00080D000h)
   107                                    %define SEV_SNP_SECRETS_SIZE (000001000h)
   108                                    %define CPUID_BASE (00080E000h)
   109                                    %define CPUID_SIZE (000001000h)
   110                                    %define SNP_SEC_MEM_BASE_DESC_1 (000800000h)
   111                                    %define SNP_SEC_MEM_SIZE_DESC_1 (000809000h - SNP_SEC_MEM_BASE_DESC_1)
   112                                    ;
   113                                    ; The PcdOvmfSecGhcbBase reserves two GHCB pages. The first page is used
   114                                    ; as GHCB shared page and second is used for bookkeeping to support the
   115                                    ; nested GHCB in SEC phase. The bookkeeping page is mapped private. The VMM
   116                                    ; does not need to validate the shared page but it need to validate the
   117                                    ; bookkeeping page.
   118                                    ;
   119                                    %define SNP_SEC_MEM_BASE_DESC_2 (GHCB_BASE + 01000h)
   120                                    %define SNP_SEC_MEM_SIZE_DESC_2 (SEV_SNP_SECRETS_BASE - SNP_SEC_MEM_BASE_DESC_2)
   121                                    %define SNP_SEC_MEM_BASE_DESC_3 (CPUID_BASE + CPUID_SIZE)
   122                                    %define SNP_SEC_MEM_SIZE_DESC_3 (000820000h - SNP_SEC_MEM_BASE_DESC_3)
   123                                  
   124                                  %include "X64/IntelTdxMetadata.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Tdx Virtual Firmware metadata
     4                              <1> ;
     5                              <1> ; When host VMM creates a new guest TD, some initial set of TD-private pages
     6                              <1> ; are added using the TDH.MEM.PAGE.ADD function. These pages typically contain
     7                              <1> ; Virtual BIOS code and data along with some clear pages for stacks and heap.
     8                              <1> ; In the meanwhile, some configuration data need be measured by host VMM.
     9                              <1> ; Tdx Metadata is designed for this purpose to indicate host VMM how to do the
    10                              <1> ; above tasks.
    11                              <1> ;
    12                              <1> ; Tdx Metadata consists of a DESCRIPTOR as the header followed by several
    13                              <1> ; SECTIONs. Host VMM sets up the memory for TDVF according to these sections.
    14                              <1> ;
    15                              <1> ; _Bfv is the example (Bfv refers to the Virtual BIOS code).
    16                              <1> ; - By DataOffset/RawDataSize host VMM knows about the position of the code
    17                              <1> ;   in the binary image.
    18                              <1> ; - MemoryAddress/MemoryDataSize indicates the guest physical address/size of
    19                              <1> ;   the Bfv to be loaded.
    20                              <1> ; - Type field means this section is of BFV. This field is designed for the
    21                              <1> ;   purpose that in some case host VMM may do some additional processing based
    22                              <1> ;   upon the section type. TdHob section is an example. Host VMM pass the
    23                              <1> ;   physical memory information to the guest firmware by writing the data in
    24                              <1> ;   the memory region designated by TdHob section.
    25                              <1> ; - By design code part of the binary image (Bfv) should be measured by host
    26                              <1> ;   VMM. This is indicated by the Attributes field.
    27                              <1> ;
    28                              <1> ; So put all these information together, when a new guest is being created,
    29                              <1> ; the initial TD-private pages for BFV is added by TDH.MEM.PAGE.ADD function,
    30                              <1> ; and Bfv is loaded at the guest physical address indicated by MemoryAddress.
    31                              <1> ; Since the Attributes is TDX_METADATA_ATTRIBUTES_EXTENDMR, Bfv is measured by
    32                              <1> ; host VMM.
    33                              <1> ;
    34                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
    35                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
    36                              <1> ;
    37                              <1> ;------------------------------------------------------------------------------
    38                              <1> 
    39                              <1> BITS    64
    40                              <1> 
    41                              <1> %define TDX_METADATA_SECTION_TYPE_BFV       0
    42                              <1> %define TDX_METADATA_SECTION_TYPE_CFV       1
    43                              <1> %define TDX_METADATA_SECTION_TYPE_TD_HOB    2
    44                              <1> %define TDX_METADATA_SECTION_TYPE_TEMP_MEM  3
    45                              <1> %define TDX_METADATA_VERSION                1
    46                              <1> %define TDX_METADATA_ATTRIBUTES_EXTENDMR    0x00000001
    47                              <1> 
    48 00000116 90<rept>            <1> ALIGN   16
    49                              <1> TIMES (15 - ((TdxGuidedStructureEnd - TdxGuidedStructureStart + 15) % 16)) DB 0
    50                              <1> 
    51                              <1> TdxGuidedStructureStart:
    52                              <1> 
    53                              <1> ;
    54                              <1> ; TDVF meta data
    55                              <1> ;
    56                              <1> TdxMetadataGuid:
    57 00000120 F3F9EAE98E16D544    <1>   DB  0xf3, 0xf9, 0xea, 0xe9, 0x8e, 0x16, 0xd5, 0x44
    58 00000128 A8EB7F4D8738F6AE    <1>   DB  0xa8, 0xeb, 0x7f, 0x4d, 0x87, 0x38, 0xf6, 0xae
    59                              <1> 
    60                              <1> _Descriptor:
    61 00000130 54445646            <1>   DB 'T','D','V','F'                                  ; Signature
    62 00000134 D0000000            <1>   DD TdxGuidedStructureEnd - _Descriptor              ; Length
    63 00000138 01000000            <1>   DD TDX_METADATA_VERSION                             ; Version
    64 0000013C 06000000            <1>   DD (TdxGuidedStructureEnd - _Descriptor - 16)/32    ; Number of sections
    65                              <1> 
    66                              <1> _Bfv:
    67 00000140 00400800            <1>   DD TDX_BFV_RAW_DATA_OFFSET
    68 00000144 00C03700            <1>   DD TDX_BFV_RAW_DATA_SIZE
    69 00000148 0040C8FF00000000    <1>   DQ TDX_BFV_MEMORY_BASE
    70 00000150 00C0370000000000    <1>   DQ TDX_BFV_MEMORY_SIZE
    71 00000158 00000000            <1>   DD TDX_METADATA_SECTION_TYPE_BFV
    72 0000015C 01000000            <1>   DD TDX_METADATA_ATTRIBUTES_EXTENDMR
    73                              <1> 
    74                              <1> _Cfv:
    75 00000160 00000000            <1>   DD TDX_CFV_RAW_DATA_OFFSET
    76 00000164 00400800            <1>   DD TDX_CFV_RAW_DATA_SIZE
    77 00000168 0000C0FF00000000    <1>   DQ TDX_CFV_MEMORY_BASE
    78 00000170 0040080000000000    <1>   DQ TDX_CFV_MEMORY_SIZE
    79 00000178 01000000            <1>   DD TDX_METADATA_SECTION_TYPE_CFV
    80 0000017C 00000000            <1>   DD 0
    81                              <1> 
    82                              <1> _TdxHeapStack:
    83 00000180 00000000            <1>   DD 0
    84 00000184 00000000            <1>   DD 0
    85 00000188 0000810000000000    <1>   DQ TDX_HEAP_STACK_BASE
    86 00000190 0000010000000000    <1>   DQ TDX_HEAP_STACK_SIZE
    87 00000198 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
    88 0000019C 00000000            <1>   DD 0
    89                              <1> 
    90                              <1> _TdxInitMem:
    91 000001A0 00000000            <1>   DD 0
    92 000001A4 00000000            <1>   DD 0
    93 000001A8 00B0800000000000    <1>   DQ TDX_INIT_MEMORY_BASE
    94 000001B0 0020000000000000    <1>   DQ TDX_INIT_MEMORY_SIZE
    95 000001B8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
    96 000001BC 00000000            <1>   DD 0
    97                              <1> 
    98                              <1> _TdHob:
    99 000001C0 00000000            <1>   DD 0
   100 000001C4 00000000            <1>   DD 0
   101 000001C8 0090800000000000    <1>   DQ TDX_HOB_MEMORY_BASE
   102 000001D0 0020000000000000    <1>   DQ TDX_HOB_MEMORY_SIZE
   103 000001D8 02000000            <1>   DD TDX_METADATA_SECTION_TYPE_TD_HOB
   104 000001DC 00000000            <1>   DD 0
   105                              <1> 
   106                              <1> _OvmfPageTable:
   107 000001E0 00000000            <1>   DD 0
   108 000001E4 00000000            <1>   DD 0
   109 000001E8 0000800000000000    <1>   DQ OVMF_PAGE_TABLE_BASE
   110 000001F0 0060000000000000    <1>   DQ OVMF_PAGE_TABLE_SIZE
   111 000001F8 03000000            <1>   DD TDX_METADATA_SECTION_TYPE_TEMP_MEM
   112 000001FC 00000000            <1>   DD 0
   113                              <1> 
   114                              <1> TdxGuidedStructureEnd:
   115                              <1> ALIGN   16
   125                                  %include "Ia32/Flat32ToFlat64.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Transition from 32 bit flat protected mode into 64 bit flat protected mode
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2018, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; Copyright (c) 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    32
    12                              <1> 
    13                              <1> ;
    14                              <1> ; Modified:  EAX, ECX, EDX
    15                              <1> ;
    16                              <1> Transition32FlatTo64Flat:
    17                              <1> 
    18                              <1>     OneTimeCall SetCr3ForPageTables64
    18 00000200 E9FB030000          <2>  jmp %1
    18                              <2> %1 %+ OneTimerCallReturn:
    19                              <1> 
    20 00000205 0F20E0              <1>     mov     eax, cr4
    21 00000208 0FBAE805            <1>     bts     eax, 5                      ; enable PAE
    22 0000020C 0F22E0              <1>     mov     cr4, eax
    23                              <1> 
    24                              <1>     ;
    25                              <1>     ; In TDX LME has already been set. So we're done and jump to enable
    26                              <1>     ; paging directly if Tdx is enabled.
    27                              <1>     ; EBX is cleared because in the later it will be used to check if
    28                              <1>     ; the second step of the SEV-ES mitigation is to be performed.
    29                              <1>     ;
    30 0000020F 31DB                <1>     xor     ebx, ebx
    31                              <1>     OneTimeCall IsTdxEnabled
    31 00000211 E985050000          <2>  jmp %1
    31                              <2> %1 %+ OneTimerCallReturn:
    32 00000216 85C0                <1>     test    eax, eax
    33 00000218 7533                <1>     jnz     EnablePaging
    34                              <1> 
    35 0000021A B9800000C0          <1>     mov     ecx, 0xc0000080
    36 0000021F 0F32                <1>     rdmsr
    37 00000221 0FBAE808            <1>     bts     eax, 8                      ; set LME
    38 00000225 0F30                <1>     wrmsr
    39                              <1> 
    40                              <1>     ;
    41                              <1>     ; SEV-ES mitigation check support
    42                              <1>     ;
    43 00000227 31DB                <1>     xor     ebx, ebx
    44                              <1> 
    45 00000229 803D04B0800000      <1>     cmp     byte[SEV_ES_WORK_AREA], 0
    46 00000230 741B                <1>     jz      EnablePaging
    47                              <1> 
    48                              <1>     ;
    49                              <1>     ; SEV-ES is active, perform a quick sanity check against the reported
    50                              <1>     ; encryption bit position. This is to help mitigate against attacks where
    51                              <1>     ; the hypervisor reports an incorrect encryption bit position.
    52                              <1>     ;
    53                              <1>     ; This is the first step in a two step process. Before paging is enabled
    54                              <1>     ; writes to memory are encrypted. Using the RDRAND instruction (available
    55                              <1>     ; on all SEV capable processors), write 64-bits of random data to the
    56                              <1>     ; SEV_ES_WORK_AREA and maintain the random data in registers (register
    57                              <1>     ; state is protected under SEV-ES). This will be used in the second step.
    58                              <1>     ;
    59                              <1> RdRand1:
    60 00000232 0FC7F1              <1>     rdrand  ecx
    61 00000235 73FB                <1>     jnc     RdRand1
    62 00000237 890D0CB08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND], ecx
    63                              <1> RdRand2:
    64 0000023D 0FC7F2              <1>     rdrand  edx
    65 00000240 73FB                <1>     jnc     RdRand2
    66 00000242 891510B08000        <1>     mov     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
    67                              <1> 
    68                              <1>     ;
    69                              <1>     ; Use EBX instead of the SEV_ES_WORK_AREA memory to determine whether to
    70                              <1>     ; perform the second step.
    71                              <1>     ;
    72 00000248 BB01000000          <1>     mov     ebx, 1
    73                              <1> 
    74                              <1> EnablePaging:
    75 0000024D 0F20C0              <1>     mov     eax, cr0
    76 00000250 0FBAE81F            <1>     bts     eax, 31                     ; set PG
    77 00000254 0F22C0              <1>     mov     cr0, eax                    ; enable paging
    78                              <1> 
    79 00000257 EAFEF8FFFF1800      <1>     jmp     LINEAR_CODE64_SEL:ADDR_OF(jumpTo64BitAndLandHere)
    80                              <1> BITS    64
    81                              <1> jumpTo64BitAndLandHere:
    82                              <1> 
    83                              <1>     ;
    84                              <1>     ; Check if the second step of the SEV-ES mitigation is to be performed.
    85                              <1>     ;
    86 0000025E 85DB                <1>     test    ebx, ebx
    87 00000260 7412                <1>     jz      InsnCompare
    88                              <1> 
    89                              <1>     ;
    90                              <1>     ; SEV-ES is active, perform the second step of the encryption bit postion
    91                              <1>     ; mitigation check. The ECX and EDX register contain data from RDRAND that
    92                              <1>     ; was stored to memory in encrypted form. If the encryption bit position is
    93                              <1>     ; valid, the contents of ECX and EDX will match the memory location.
    94                              <1>     ;
    95 00000262 390C250CB08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND], ecx
    96 00000269 7515                <1>     jne     SevEncBitHlt
    97 0000026B 39142510B08000      <1>     cmp     dword[SEV_ES_WORK_AREA_RDRAND + 4], edx
    98 00000272 750C                <1>     jne     SevEncBitHlt
    99                              <1> 
   100                              <1>     ;
   101                              <1>     ; If SEV or SEV-ES is active, perform a quick sanity check against
   102                              <1>     ; the reported encryption bit position. This is to help mitigate
   103                              <1>     ; against attacks where the hypervisor reports an incorrect encryption
   104                              <1>     ; bit position. If SEV is not active, this check will always succeed.
   105                              <1>     ;
   106                              <1>     ; The cmp instruction compares the first four bytes of the cmp instruction
   107                              <1>     ; itself (which will be read decrypted if SEV or SEV-ES is active and the
   108                              <1>     ; encryption bit position is valid) against the immediate within the
   109                              <1>     ; instruction (an instruction fetch is always decrypted correctly by
   110                              <1>     ; hardware) based on RIP relative addressing.
   111                              <1>     ;
   112                              <1> InsnCompare:
   113 00000274 813DF6FFFFFF813DF6- <1>     cmp     dword[rel InsnCompare], 0xFFF63D81
   113 0000027D FF                  <1>
   114 0000027E 7404                <1>     je      GoodCompare
   115                              <1> 
   116                              <1>     ;
   117                              <1>     ; The hypervisor provided an incorrect encryption bit position, do not
   118                              <1>     ; proceed.
   119                              <1>     ;
   120                              <1> SevEncBitHlt:
   121 00000280 FA                  <1>     cli
   122 00000281 F4                  <1>     hlt
   123 00000282 EBFC                <1>     jmp     SevEncBitHlt
   124                              <1> 
   125                              <1> GoodCompare:
   126                              <1>     debugShowPostCode POSTCODE_64BIT_MODE
   127                              <1> 
   128                              <1>     OneTimeCallRet Transition32FlatTo64Flat
   128 00000284 E90F060000          <2>  jmp %1 %+ OneTimerCallReturn
   129                              <1> 
   126                                  %include "Ia32/AmdSev.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Provide the functions to check whether SEV and SEV-ES is enabled.
     4                              <1> ;
     5                              <1> ; Copyright (c) 2017 - 2021, Advanced Micro Devices, Inc. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS    32
    11                              <1> 
    12                              <1> ;
    13                              <1> ; SEV-ES #VC exception handler support
    14                              <1> ;
    15                              <1> ; #VC handler local variable locations
    16                              <1> ;
    17                              <1> %define VC_CPUID_RESULT_EAX         0
    18                              <1> %define VC_CPUID_RESULT_EBX         4
    19                              <1> %define VC_CPUID_RESULT_ECX         8
    20                              <1> %define VC_CPUID_RESULT_EDX        12
    21                              <1> %define VC_GHCB_MSR_EDX            16
    22                              <1> %define VC_GHCB_MSR_EAX            20
    23                              <1> %define VC_CPUID_REQUEST_REGISTER  24
    24                              <1> %define VC_CPUID_FUNCTION          28
    25                              <1> 
    26                              <1> ; #VC handler total local variable size
    27                              <1> ;
    28                              <1> %define VC_VARIABLE_SIZE           32
    29                              <1> 
    30                              <1> ; #VC handler GHCB CPUID request/response protocol values
    31                              <1> ;
    32                              <1> %define GHCB_CPUID_REQUEST          4
    33                              <1> %define GHCB_CPUID_RESPONSE         5
    34                              <1> %define GHCB_CPUID_REGISTER_SHIFT  30
    35                              <1> %define CPUID_INSN_LEN              2
    36                              <1> 
    37                              <1> ; #VC handler offsets/sizes for accessing SNP CPUID page
    38                              <1> ;
    39                              <1> %define SNP_CPUID_ENTRY_SZ         48
    40                              <1> %define SNP_CPUID_COUNT             0
    41                              <1> %define SNP_CPUID_ENTRY            16
    42                              <1> %define SNP_CPUID_ENTRY_EAX_IN      0
    43                              <1> %define SNP_CPUID_ENTRY_ECX_IN      4
    44                              <1> %define SNP_CPUID_ENTRY_EAX        24
    45                              <1> %define SNP_CPUID_ENTRY_EBX        28
    46                              <1> %define SNP_CPUID_ENTRY_ECX        32
    47                              <1> %define SNP_CPUID_ENTRY_EDX        36
    48                              <1> 
    49                              <1> 
    50                              <1> %define SEV_GHCB_MSR                0xc0010130
    51                              <1> %define SEV_STATUS_MSR              0xc0010131
    52                              <1> 
    53                              <1> ; The #VC was not for CPUID
    54                              <1> %define TERM_VC_NOT_CPUID           1
    55                              <1> 
    56                              <1> ; The unexpected response code
    57                              <1> %define TERM_UNEXPECTED_RESP_CODE   2
    58                              <1> 
    59                              <1> %define PAGE_PRESENT            0x01
    60                              <1> %define PAGE_READ_WRITE         0x02
    61                              <1> %define PAGE_USER_SUPERVISOR    0x04
    62                              <1> %define PAGE_WRITE_THROUGH      0x08
    63                              <1> %define PAGE_CACHE_DISABLE     0x010
    64                              <1> %define PAGE_ACCESSED          0x020
    65                              <1> %define PAGE_DIRTY             0x040
    66                              <1> %define PAGE_PAT               0x080
    67                              <1> %define PAGE_GLOBAL           0x0100
    68                              <1> %define PAGE_2M_MBO            0x080
    69                              <1> %define PAGE_2M_PAT          0x01000
    70                              <1> 
    74                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
    75                              <1> 
    78                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
    79                              <1> 
    80                              <1> 
    81                              <1> ; Macro is used to issue the MSR protocol based VMGEXIT. The caller is
    82                              <1> ; responsible to populate values in the EDX:EAX registers. After the vmmcall
    83                              <1> ; returns, it verifies that the response code matches with the expected
    84                              <1> ; code. If it does not match then terminate the guest. The result of request
    85                              <1> ; is returned in the EDX:EAX.
    86                              <1> ;
    87                              <1> ; args 1:Request code, 2: Response code
    88                              <1> %macro VmgExit 2
    89                              <1>     ;
    90                              <1>     ; Add request code:
    91                              <1>     ;   GHCB_MSR[11:0]  = Request code
    92                              <1>     or      eax, %1
    93                              <1> 
    94                              <1>     mov     ecx, SEV_GHCB_MSR
    95                              <1>     wrmsr
    96                              <1> 
    97                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
    98                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
    99                              <1>     ;
   100                              <1> BITS    64
   101                              <1>     rep     vmmcall
   102                              <1> BITS    32
   103                              <1> 
   104                              <1>     mov     ecx, SEV_GHCB_MSR
   105                              <1>     rdmsr
   106                              <1> 
   107                              <1>     ;
   108                              <1>     ; Verify the reponse code, if it does not match then request to terminate
   109                              <1>     ;   GHCB_MSR[11:0]  = Response code
   110                              <1>     mov     ecx, eax
   111                              <1>     and     ecx, 0xfff
   112                              <1>     cmp     ecx, %2
   113                              <1>     jne     SevEsUnexpectedRespTerminate
   114                              <1> %endmacro
   115                              <1> 
   116                              <1> ; Macro to terminate the guest using the VMGEXIT.
   117                              <1> ; arg 1: reason code
   118                              <1> %macro TerminateVmgExit 1
   119                              <1>     mov     eax, %1
   120                              <1>     ;
   121                              <1>     ; Use VMGEXIT to request termination. At this point the reason code is
   122                              <1>     ; located in EAX, so shift it left 16 bits to the proper location.
   123                              <1>     ;
   124                              <1>     ; EAX[11:0]  => 0x100 - request termination
   125                              <1>     ; EAX[15:12] => 0x1   - OVMF
   126                              <1>     ; EAX[23:16] => 0xXX  - REASON CODE
   127                              <1>     ;
   128                              <1>     shl     eax, 16
   129                              <1>     or      eax, 0x1100
   130                              <1>     xor     edx, edx
   131                              <1>     mov     ecx, SEV_GHCB_MSR
   132                              <1>     wrmsr
   133                              <1>     ;
   134                              <1>     ; Issue VMGEXIT - NASM doesn't support the vmmcall instruction in 32-bit
   135                              <1>     ; mode, so work around this by temporarily switching to 64-bit mode.
   136                              <1>     ;
   137                              <1> BITS    64
   138                              <1>     rep     vmmcall
   139                              <1> BITS    32
   140                              <1> 
   141                              <1>     ;
   142                              <1>     ; We shouldn't come back from the VMGEXIT, but if we do, just loop.
   143                              <1>     ;
   144                              <1> %%TerminateHlt:
   145                              <1>     hlt
   146                              <1>     jmp     %%TerminateHlt
   147                              <1> %endmacro
   148                              <1> 
   149                              <1> ; Terminate the guest due to unexpected response code.
   150                              <1> SevEsUnexpectedRespTerminate:
   151                              <1>     TerminateVmgExit    TERM_UNEXPECTED_RESP_CODE
   151 00000289 B802000000          <2>  mov eax, %1
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151 0000028E C1E010              <2>  shl eax, 16
   151 00000291 0D00110000          <2>  or eax, 0x1100
   151 00000296 31D2                <2>  xor edx, edx
   151 00000298 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   151 0000029D 0F30                <2>  wrmsr
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> BITS 64
   151 0000029F F30F01D9            <2>  rep vmmcall
   151                              <2> BITS 32
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> 
   151                              <2> %%TerminateHlt:
   151 000002A3 F4                  <2>  hlt
   151 000002A4 EBFD                <2>  jmp %%TerminateHlt
   152                              <1> 
   153                              <1> ; If SEV-ES is enabled then initialize and make the GHCB page shared
   154                              <1> SevClearPageEncMaskForGhcbPage:
   155                              <1>     ; Check if SEV is enabled
   156 000002A6 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   157 000002AD 754D                <1>     jnz       SevClearPageEncMaskForGhcbPageExit
   158                              <1> 
   159                              <1>     ; Check if SEV-ES is enabled
   160 000002AF 803D04B0800001      <1>     cmp       byte[SEV_ES_WORK_AREA], 1
   161 000002B6 7544                <1>     jnz       SevClearPageEncMaskForGhcbPageExit
   162                              <1> 
   163                              <1>     ;
   164                              <1>     ; The initial GHCB will live at GHCB_BASE and needs to be un-encrypted.
   165                              <1>     ; This requires the 2MB page for this range be broken down into 512 4KB
   166                              <1>     ; pages.  All will be marked encrypted, except for the GHCB.
   167                              <1>     ;
   168 000002B8 B904000000          <1>     mov     ecx, (GHCB_BASE >> 21)
   169 000002BD B823808000          <1>     mov     eax, GHCB_PT_ADDR + PAGE_PDP_ATTR
   170 000002C2 8904CD00208000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000)], eax
   171                              <1> 
   172                              <1>     ;
   173                              <1>     ; Page Table Entries (512 * 4KB entries => 2MB)
   174                              <1>     ;
   175 000002C9 B900020000          <1>     mov     ecx, 512
   176                              <1> pageTableEntries4kLoop:
   177 000002CE 89C8                <1>     mov     eax, ecx
   178 000002D0 48                  <1>     dec     eax
   179 000002D1 C1E00C              <1>     shl     eax, 12
   180 000002D4 0500008000          <1>     add     eax, GHCB_BASE & 0xFFE0_0000
   181 000002D9 83C063              <1>     add     eax, PAGE_4K_PDE_ATTR
   182 000002DC 8904CDF87F8000      <1>     mov     [ecx * 8 + GHCB_PT_ADDR - 8], eax
   183 000002E3 8914CDFC7F8000      <1>     mov     [(ecx * 8 + GHCB_PT_ADDR - 8) + 4], edx
   184 000002EA E2E2                <1>     loop    pageTableEntries4kLoop
   185                              <1> 
   186                              <1>     ;
   187                              <1>     ; Clear the encryption bit from the GHCB entry
   188                              <1>     ;
   189 000002EC B909000000          <1>     mov     ecx, (GHCB_BASE & 0x1F_FFFF) >> 12
   190 000002F1 C704CD048080000000- <1>     mov     [ecx * 8 + GHCB_PT_ADDR + 4], strict dword 0
   190 000002FA 0000                <1>
   191                              <1> 
   192                              <1> SevClearPageEncMaskForGhcbPageExit:
   193                              <1>     OneTimeCallRet SevClearPageEncMaskForGhcbPage
   193 000002FC E9A1030000          <2>  jmp %1 %+ OneTimerCallReturn
   194                              <1> 
   195                              <1> ; Check if SEV is enabled, and get the C-bit mask above 31.
   196                              <1> ; Modified: EDX
   197                              <1> ;
   198                              <1> ; The value is returned in the EDX
   199                              <1> GetSevCBitMaskAbove31:
   200 00000301 31D2                <1>     xor       edx, edx
   201                              <1> 
   202                              <1>     ; Check if SEV is enabled
   203 00000303 803D00B0800001      <1>     cmp       byte[WORK_AREA_GUEST_TYPE], 1
   204 0000030A 7506                <1>     jnz       GetSevCBitMaskAbove31Exit
   205                              <1> 
   206 0000030C 8B1518B08000        <1>     mov       edx, dword[SEV_ES_WORK_AREA_ENC_MASK + 4]
   207                              <1> 
   208                              <1> GetSevCBitMaskAbove31Exit:
   209                              <1>     OneTimeCallRet GetSevCBitMaskAbove31
   209 00000312 E906030000          <2>  jmp %1 %+ OneTimerCallReturn
   210                              <1> 
   211                              <1> ; Check if Secure Encrypted Virtualization (SEV) features are enabled.
   212                              <1> ;
   213                              <1> ; Register usage is tight in this routine, so multiple calls for the
   214                              <1> ; same CPUID and MSR data are performed to keep things simple.
   215                              <1> ;
   216                              <1> ; Modified:  EAX, EBX, ECX, EDX, ESP
   217                              <1> ;
   218                              <1> ; If SEV is enabled then EAX will be at least 32.
   219                              <1> ; If SEV is disabled then EAX will be zero.
   220                              <1> ;
   221                              <1> CheckSevFeatures:
   222                              <1>     ; Set the first byte of the workarea to zero to communicate to the SEC
   223                              <1>     ; phase that SEV-ES is not enabled. If SEV-ES is enabled, the CPUID
   224                              <1>     ; instruction will trigger a #VC exception where the first byte of the
   225                              <1>     ; workarea will be set to one or, if CPUID is not being intercepted,
   226                              <1>     ; the MSR check below will set the first byte of the workarea to one.
   227 00000317 C60504B0800000      <1>     mov     byte[SEV_ES_WORK_AREA], 0
   228                              <1> 
   229                              <1>     ;
   230                              <1>     ; Set up exception handlers to check for SEV-ES
   231                              <1>     ;   Load temporary RAM stack based on PCDs (see SevEsIdtVmmComm for
   232                              <1>     ;   stack usage)
   233                              <1>     ;   Establish exception handlers
   234                              <1>     ;
   235 0000031E BC00008200          <1>     mov       esp, SEV_ES_VC_TOP_OF_STACK
   236 00000323 B892FBFFFF          <1>     mov       eax, ADDR_OF(Idtr)
   237 00000328 2E0F0118            <1>     lidt      [cs:eax]
   238                              <1> 
   239                              <1>     ; Check if we have a valid (0x8000_001F) CPUID leaf
   240                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   241 0000032C B800000080          <1>     mov       eax, 0x80000000
   242 00000331 0FA2                <1>     cpuid
   243                              <1> 
   244                              <1>     ; This check should fail on Intel or Non SEV AMD CPUs. In future if
   245                              <1>     ; Intel CPUs supports this CPUID leaf then we are guranteed to have exact
   246                              <1>     ; same bit definition.
   247 00000333 3D1F000080          <1>     cmp       eax, 0x8000001f
   248 00000338 7C67                <1>     jl        NoSev
   249                              <1> 
   250                              <1>     ; Check for SEV memory encryption feature:
   251                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 1
   252                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   253 0000033A B81F000080          <1>     mov       eax, 0x8000001f
   254 0000033F 0FA2                <1>     cpuid
   255 00000341 0FBAE001            <1>     bt        eax, 1
   256 00000345 735A                <1>     jnc       NoSev
   257                              <1> 
   258                              <1>     ; Check if SEV memory encryption is enabled
   259                              <1>     ;  MSR_0xC0010131 - Bit 0 (SEV enabled)
   260 00000347 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   261 0000034C 0F32                <1>     rdmsr
   262 0000034E 0FBAE000            <1>     bt        eax, 0
   263 00000352 734D                <1>     jnc       NoSev
   264                              <1> 
   265                              <1>     ; Set the work area header to indicate that the SEV is enabled
   266 00000354 C60500B0800001      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 1
   267                              <1> 
   268                              <1>     ; Check for SEV-ES memory encryption feature:
   269                              <1>     ; CPUID  Fn8000_001F[EAX] - Bit 3
   270                              <1>     ;   CPUID raises a #VC exception if running as an SEV-ES guest
   271 0000035B B81F000080          <1>     mov       eax, 0x8000001f
   272 00000360 0FA2                <1>     cpuid
   273 00000362 0FBAE003            <1>     bt        eax, 3
   274 00000366 7314                <1>     jnc       GetSevEncBit
   275                              <1> 
   276                              <1>     ; Check if SEV-ES is enabled
   277                              <1>     ;  MSR_0xC0010131 - Bit 1 (SEV-ES enabled)
   278 00000368 B9310101C0          <1>     mov       ecx, SEV_STATUS_MSR
   279 0000036D 0F32                <1>     rdmsr
   280 0000036F 0FBAE001            <1>     bt        eax, 1
   281 00000373 7307                <1>     jnc       GetSevEncBit
   282                              <1> 
   283                              <1>     ; Set the first byte of the workarea to one to communicate to the SEC
   284                              <1>     ; phase that SEV-ES is enabled.
   285 00000375 C60504B0800001      <1>     mov       byte[SEV_ES_WORK_AREA], 1
   286                              <1> 
   287                              <1> GetSevEncBit:
   288                              <1>     ; Get pte bit position to enable memory encryption
   289                              <1>     ; CPUID Fn8000_001F[EBX] - Bits 5:0
   290                              <1>     ;
   291 0000037C 83E33F              <1>     and       ebx, 0x3f
   292 0000037F 89D8                <1>     mov       eax, ebx
   293                              <1> 
   294                              <1>     ; The encryption bit position is always above 31
   295 00000381 83EB20              <1>     sub       ebx, 32
   296 00000384 7904                <1>     jns       SevSaveMask
   297                              <1> 
   298                              <1>     ; Encryption bit was reported as 31 or below, enter a HLT loop
   299                              <1> SevEncBitLowHlt:
   300 00000386 FA                  <1>     cli
   301 00000387 F4                  <1>     hlt
   302 00000388 EBFC                <1>     jmp       SevEncBitLowHlt
   303                              <1> 
   304                              <1> SevSaveMask:
   305 0000038A 31D2                <1>     xor       edx, edx
   306 0000038C 0FABDA              <1>     bts       edx, ebx
   307                              <1> 
   308 0000038F C70514B08000000000- <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK], 0
   308 00000398 00                  <1>
   309 00000399 891518B08000        <1>     mov       dword[SEV_ES_WORK_AREA_ENC_MASK + 4], edx
   310 0000039F EB0F                <1>     jmp       SevExit
   311                              <1> 
   312                              <1> NoSev:
   313                              <1>     ;
   314                              <1>     ; Perform an SEV-ES sanity check by seeing if a #VC exception occurred.
   315                              <1>     ;
   316 000003A1 803D04B0800000      <1>     cmp       byte[SEV_ES_WORK_AREA], 0
   317 000003A8 7404                <1>     jz        NoSevPass
   318                              <1> 
   319                              <1>     ;
   320                              <1>     ; A #VC was received, yet CPUID indicates no SEV-ES support, something
   321                              <1>     ; isn't right.
   322                              <1>     ;
   323                              <1> NoSevEsVcHlt:
   324 000003AA FA                  <1>     cli
   325 000003AB F4                  <1>     hlt
   326 000003AC EBFC                <1>     jmp       NoSevEsVcHlt
   327                              <1> 
   328                              <1> NoSevPass:
   329 000003AE 31C0                <1>     xor       eax, eax
   330                              <1> 
   331                              <1> SevExit:
   332                              <1>     ;
   333                              <1>     ; Clear exception handlers and stack
   334                              <1>     ;
   335 000003B0 50                  <1>     push      eax
   336 000003B1 B898FBFFFF          <1>     mov       eax, ADDR_OF(IdtrClear)
   337 000003B6 2E0F0118            <1>     lidt      [cs:eax]
   338 000003BA 58                  <1>     pop       eax
   339 000003BB BC00000000          <1>     mov       esp, 0
   340                              <1> 
   341                              <1>     OneTimeCallRet CheckSevFeatures
   341 000003C0 E953020000          <2>  jmp %1 %+ OneTimerCallReturn
   342                              <1> 
   343                              <1> ; Start of #VC exception handling routines
   344                              <1> ;
   345                              <1> 
   346                              <1> SevEsIdtNotCpuid:
   347                              <1>     TerminateVmgExit TERM_VC_NOT_CPUID
   347 000003C5 B801000000          <2>  mov eax, %1
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347 000003CA C1E010              <2>  shl eax, 16
   347 000003CD 0D00110000          <2>  or eax, 0x1100
   347 000003D2 31D2                <2>  xor edx, edx
   347 000003D4 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   347 000003D9 0F30                <2>  wrmsr
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> BITS 64
   347 000003DB F30F01D9            <2>  rep vmmcall
   347                              <2> BITS 32
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> 
   347                              <2> %%TerminateHlt:
   347 000003DF F4                  <2>  hlt
   347 000003E0 EBFD                <2>  jmp %%TerminateHlt
   348 000003E2 CF                  <1>     iret
   349                              <1> 
   350                              <1> ; Use the SNP CPUID page to handle the cpuid lookup
   351                              <1> ;
   352                              <1> ;  Modified: EAX, EBX, ECX, EDX
   353                              <1> ;
   354                              <1> ;  Relies on the stack setup/usage in #VC handler:
   355                              <1> ;
   356                              <1> ;    On entry,
   357                              <1> ;      [esp + VC_CPUID_FUNCTION] contains EAX input to cpuid instruction
   358                              <1> ;
   359                              <1> ;    On return, stores corresponding results of CPUID lookup in:
   360                              <1> ;      [esp + VC_CPUID_RESULT_EAX]
   361                              <1> ;      [esp + VC_CPUID_RESULT_EBX]
   362                              <1> ;      [esp + VC_CPUID_RESULT_ECX]
   363                              <1> ;      [esp + VC_CPUID_RESULT_EDX]
   364                              <1> ;
   365                              <1> SnpCpuidLookup:
   366 000003E3 8B44241C            <1>     mov     eax, [esp + VC_CPUID_FUNCTION]
   367 000003E7 8B1D00E08000        <1>     mov     ebx, [CPUID_BASE + SNP_CPUID_COUNT]
   368 000003ED B910E08000          <1>     mov     ecx, CPUID_BASE + SNP_CPUID_ENTRY
   369                              <1>     ; Zero these out now so we can simply return if lookup fails
   370 000003F2 C7042400000000      <1>     mov     dword[esp + VC_CPUID_RESULT_EAX], 0
   371 000003F9 C744240400000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EBX], 0
   372 00000401 C744240800000000    <1>     mov     dword[esp + VC_CPUID_RESULT_ECX], 0
   373 00000409 C744240C00000000    <1>     mov     dword[esp + VC_CPUID_RESULT_EDX], 0
   374                              <1> 
   375                              <1> SnpCpuidCheckEntry:
   376 00000411 83FB00              <1>     cmp     ebx, 0
   377 00000414 0F84C0000000        <1>     je      VmmDoneSnpCpuid
   378 0000041A 3901                <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_EAX_IN], eax
   379 0000041C 7506                <1>     jne     SnpCpuidCheckEntryNext
   380                              <1>     ; As with SEV-ES handler we assume requested CPUID sub-leaf/index is 0
   381 0000041E 83790400            <1>     cmp     dword[ecx + SNP_CPUID_ENTRY_ECX_IN], 0
   382 00000422 7406                <1>     je      SnpCpuidEntryFound
   383                              <1> 
   384                              <1> SnpCpuidCheckEntryNext:
   385 00000424 4B                  <1>     dec     ebx
   386 00000425 83C130              <1>     add     ecx, SNP_CPUID_ENTRY_SZ
   387 00000428 EBE7                <1>     jmp     SnpCpuidCheckEntry
   388                              <1> 
   389                              <1> SnpCpuidEntryFound:
   390 0000042A 8B4118              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EAX]
   391 0000042D 890424              <1>     mov     [esp + VC_CPUID_RESULT_EAX], eax
   392 00000430 8B411C              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EBX]
   393 00000433 89442404            <1>     mov     [esp + VC_CPUID_RESULT_EBX], eax
   394 00000437 8B4124              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_EDX]
   395 0000043A 89442408            <1>     mov     [esp + VC_CPUID_RESULT_ECX], eax
   396 0000043E 8B4120              <1>     mov     eax, [ecx + SNP_CPUID_ENTRY_ECX]
   397 00000441 8944240C            <1>     mov     [esp + VC_CPUID_RESULT_EDX], eax
   398 00000445 E990000000          <1>     jmp     VmmDoneSnpCpuid
   399                              <1> 
   400                              <1> ;
   401                              <1> ; Total stack usage for the #VC handler is 44 bytes:
   402                              <1> ;   - 12 bytes for the exception IRET (after popping error code)
   403                              <1> ;   - 32 bytes for the local variables.
   404                              <1> ;
   405                              <1> SevEsIdtVmmComm:
   406                              <1>     ;
   407                              <1>     ; If we're here, then we are an SEV-ES guest and this
   408                              <1>     ; was triggered by a CPUID instruction
   409                              <1>     ;
   410                              <1>     ; Set the first byte of the workarea to one to communicate that
   411                              <1>     ; a #VC was taken.
   412 0000044A C60504B0800001      <1>     mov     byte[SEV_ES_WORK_AREA], 1
   413                              <1> 
   414 00000451 59                  <1>     pop     ecx                     ; Error code
   415 00000452 83F972              <1>     cmp     ecx, 0x72               ; Be sure it was CPUID
   416 00000455 0F856AFFFFFF        <1>     jne     SevEsIdtNotCpuid
   417                              <1> 
   418                              <1>     ; Set up local variable room on the stack
   419                              <1>     ;   CPUID function         : + 28
   420                              <1>     ;   CPUID request register : + 24
   421                              <1>     ;   GHCB MSR (EAX)         : + 20
   422                              <1>     ;   GHCB MSR (EDX)         : + 16
   423                              <1>     ;   CPUID result (EDX)     : + 12
   424                              <1>     ;   CPUID result (ECX)     : + 8
   425                              <1>     ;   CPUID result (EBX)     : + 4
   426                              <1>     ;   CPUID result (EAX)     : + 0
   427 0000045B 83EC20              <1>     sub     esp, VC_VARIABLE_SIZE
   428                              <1> 
   429                              <1>     ; Save the CPUID function being requested
   430 0000045E 8944241C            <1>     mov     [esp + VC_CPUID_FUNCTION], eax
   431                              <1> 
   432                              <1>     ; If SEV-SNP is enabled, use the CPUID page to handle the CPUID
   433                              <1>     ; instruction.
   434 00000462 B9310101C0          <1>     mov     ecx, SEV_STATUS_MSR
   435 00000467 0F32                <1>     rdmsr
   436 00000469 0FBAE002            <1>     bt      eax, 2
   437 0000046D 0F8270FFFFFF        <1>     jc      SnpCpuidLookup
   438                              <1> 
   439                              <1>     ; The GHCB CPUID protocol uses the following mapping to request
   440                              <1>     ; a specific register:
   441                              <1>     ;   0 => EAX, 1 => EBX, 2 => ECX, 3 => EDX
   442                              <1>     ;
   443                              <1>     ; Set EAX as the first register to request. This will also be used as a
   444                              <1>     ; loop variable to request all register values (EAX to EDX).
   445 00000473 31C0                <1>     xor     eax, eax
   446 00000475 89442418            <1>     mov     [esp + VC_CPUID_REQUEST_REGISTER], eax
   447                              <1> 
   448                              <1>     ; Save current GHCB MSR value
   449 00000479 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   450 0000047E 0F32                <1>     rdmsr
   451 00000480 89442414            <1>     mov     [esp + VC_GHCB_MSR_EAX], eax
   452 00000484 89542410            <1>     mov     [esp + VC_GHCB_MSR_EDX], edx
   453                              <1> 
   454                              <1> NextReg:
   455                              <1>     ;
   456                              <1>     ; Setup GHCB MSR
   457                              <1>     ;   GHCB_MSR[63:32] = CPUID function
   458                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   459                              <1>     ;   GHCB_MSR[11:0]  = CPUID request protocol
   460                              <1>     ;
   461 00000488 8B442418            <1>     mov     eax, [esp + VC_CPUID_REQUEST_REGISTER]
   462 0000048C 83F804              <1>     cmp     eax, 4
   463 0000048F 7D3A                <1>     jge     VmmDone
   464                              <1> 
   465 00000491 C1E01E              <1>     shl     eax, GHCB_CPUID_REGISTER_SHIFT
   466 00000494 8B54241C            <1>     mov     edx, [esp + VC_CPUID_FUNCTION]
   467                              <1> 
   468                              <1>     VmgExit GHCB_CPUID_REQUEST, GHCB_CPUID_RESPONSE
   468                              <2> 
   468                              <2> 
   468                              <2> 
   468 00000498 83C804              <2>  or eax, %1
   468                              <2> 
   468 0000049B B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   468 000004A0 0F30                <2>  wrmsr
   468                              <2> 
   468                              <2> 
   468                              <2> 
   468                              <2> 
   468                              <2> BITS 64
   468 000004A2 F30F01D9            <2>  rep vmmcall
   468                              <2> BITS 32
   468                              <2> 
   468 000004A6 B9300101C0          <2>  mov ecx, SEV_GHCB_MSR
   468 000004AB 0F32                <2>  rdmsr
   468                              <2> 
   468                              <2> 
   468                              <2> 
   468                              <2> 
   468 000004AD 89C1                <2>  mov ecx, eax
   468 000004AF 81E1FF0F0000        <2>  and ecx, 0xfff
   468 000004B5 83F905              <2>  cmp ecx, %2
   468 000004B8 0F85CBFDFFFF        <2>  jne SevEsUnexpectedRespTerminate
   469                              <1> 
   470                              <1>     ;
   471                              <1>     ; Response GHCB MSR
   472                              <1>     ;   GHCB_MSR[63:32] = CPUID register value
   473                              <1>     ;   GHCB_MSR[31:30] = CPUID register
   474                              <1>     ;   GHCB_MSR[11:0]  = CPUID response protocol
   475                              <1>     ;
   476                              <1> 
   477                              <1>     ; Save returned value
   478 000004BE C1E81E              <1>     shr     eax, GHCB_CPUID_REGISTER_SHIFT
   479 000004C1 891484              <1>     mov     [esp + eax * 4], edx
   480                              <1> 
   481                              <1>     ; Next register
   482 000004C4 66FF442418          <1>     inc     word [esp + VC_CPUID_REQUEST_REGISTER]
   483                              <1> 
   484 000004C9 EBBD                <1>     jmp     NextReg
   485                              <1> 
   486                              <1> VmmDone:
   487                              <1>     ;
   488                              <1>     ; At this point we have all CPUID register values. Restore the GHCB MSR,
   489                              <1>     ; set the return register values and return.
   490                              <1>     ;
   491 000004CB 8B442414            <1>     mov     eax, [esp + VC_GHCB_MSR_EAX]
   492 000004CF 8B542410            <1>     mov     edx, [esp + VC_GHCB_MSR_EDX]
   493 000004D3 B9300101C0          <1>     mov     ecx, SEV_GHCB_MSR
   494 000004D8 0F30                <1>     wrmsr
   495                              <1> 
   496                              <1> VmmDoneSnpCpuid:
   497 000004DA 8B0424              <1>     mov     eax, [esp + VC_CPUID_RESULT_EAX]
   498 000004DD 8B5C2404            <1>     mov     ebx, [esp + VC_CPUID_RESULT_EBX]
   499 000004E1 8B4C2408            <1>     mov     ecx, [esp + VC_CPUID_RESULT_ECX]
   500 000004E5 8B54240C            <1>     mov     edx, [esp + VC_CPUID_RESULT_EDX]
   501                              <1> 
   502 000004E9 83C420              <1>     add     esp, VC_VARIABLE_SIZE
   503                              <1> 
   504                              <1>     ; Update the EIP value to skip over the now handled CPUID instruction
   505                              <1>     ; (the CPUID instruction has a length of 2)
   506 000004EC 6683042402          <1>     add     word [esp], CPUID_INSN_LEN
   507 000004F1 CF                  <1>     iret
   508                              <1> 
   509                              <1> ALIGN   2
   510                              <1> 
   511                              <1> Idtr:
   512 000004F2 FF00                <1>     dw      IDT_END - IDT_BASE - 1  ; Limit
   513 000004F4 A0FBFFFF            <1>     dd      ADDR_OF(IDT_BASE)       ; Base
   514                              <1> 
   515                              <1> IdtrClear:
   516 000004F8 0000                <1>     dw      0                       ; Limit
   517 000004FA 00000000            <1>     dd      0                       ; Base
   518                              <1> 
   519 000004FE 90<rept>            <1> ALIGN   16
   520                              <1> 
   521                              <1> ;
   522                              <1> ; The Interrupt Descriptor Table (IDT)
   523                              <1> ;   This will be used to determine if SEV-ES is enabled.  Upon execution
   524                              <1> ;   of the CPUID instruction, a VMM Communication Exception will occur.
   525                              <1> ;   This will tell us if SEV-ES is enabled.  We can use the current value
   526                              <1> ;   of the GHCB MSR to determine the SEV attributes.
   527                              <1> ;
   528                              <1> IDT_BASE:
   529                              <1> ;
   530                              <1> ; Vectors 0 - 28 (No handlers)
   531                              <1> ;
   532                              <1> %rep 29
   533                              <1>     dw      0                                    ; Offset low bits 15..0
   534                              <1>     dw      0x10                                 ; Selector
   535                              <1>     db      0                                    ; Reserved
   536                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   537                              <1>     dw      0                                    ; Offset high bits 31..16
   538                              <1> %endrep
   538 00000500 0000                <2>  dw 0
   538 00000502 1000                <2>  dw 0x10
   538 00000504 00                  <2>  db 0
   538 00000505 8E                  <2>  db 0x8E
   538 00000506 0000                <2>  dw 0
   538 00000508 0000                <2>  dw 0
   538 0000050A 1000                <2>  dw 0x10
   538 0000050C 00                  <2>  db 0
   538 0000050D 8E                  <2>  db 0x8E
   538 0000050E 0000                <2>  dw 0
   538 00000510 0000                <2>  dw 0
   538 00000512 1000                <2>  dw 0x10
   538 00000514 00                  <2>  db 0
   538 00000515 8E                  <2>  db 0x8E
   538 00000516 0000                <2>  dw 0
   538 00000518 0000                <2>  dw 0
   538 0000051A 1000                <2>  dw 0x10
   538 0000051C 00                  <2>  db 0
   538 0000051D 8E                  <2>  db 0x8E
   538 0000051E 0000                <2>  dw 0
   538 00000520 0000                <2>  dw 0
   538 00000522 1000                <2>  dw 0x10
   538 00000524 00                  <2>  db 0
   538 00000525 8E                  <2>  db 0x8E
   538 00000526 0000                <2>  dw 0
   538 00000528 0000                <2>  dw 0
   538 0000052A 1000                <2>  dw 0x10
   538 0000052C 00                  <2>  db 0
   538 0000052D 8E                  <2>  db 0x8E
   538 0000052E 0000                <2>  dw 0
   538 00000530 0000                <2>  dw 0
   538 00000532 1000                <2>  dw 0x10
   538 00000534 00                  <2>  db 0
   538 00000535 8E                  <2>  db 0x8E
   538 00000536 0000                <2>  dw 0
   538 00000538 0000                <2>  dw 0
   538 0000053A 1000                <2>  dw 0x10
   538 0000053C 00                  <2>  db 0
   538 0000053D 8E                  <2>  db 0x8E
   538 0000053E 0000                <2>  dw 0
   538 00000540 0000                <2>  dw 0
   538 00000542 1000                <2>  dw 0x10
   538 00000544 00                  <2>  db 0
   538 00000545 8E                  <2>  db 0x8E
   538 00000546 0000                <2>  dw 0
   538 00000548 0000                <2>  dw 0
   538 0000054A 1000                <2>  dw 0x10
   538 0000054C 00                  <2>  db 0
   538 0000054D 8E                  <2>  db 0x8E
   538 0000054E 0000                <2>  dw 0
   538 00000550 0000                <2>  dw 0
   538 00000552 1000                <2>  dw 0x10
   538 00000554 00                  <2>  db 0
   538 00000555 8E                  <2>  db 0x8E
   538 00000556 0000                <2>  dw 0
   538 00000558 0000                <2>  dw 0
   538 0000055A 1000                <2>  dw 0x10
   538 0000055C 00                  <2>  db 0
   538 0000055D 8E                  <2>  db 0x8E
   538 0000055E 0000                <2>  dw 0
   538 00000560 0000                <2>  dw 0
   538 00000562 1000                <2>  dw 0x10
   538 00000564 00                  <2>  db 0
   538 00000565 8E                  <2>  db 0x8E
   538 00000566 0000                <2>  dw 0
   538 00000568 0000                <2>  dw 0
   538 0000056A 1000                <2>  dw 0x10
   538 0000056C 00                  <2>  db 0
   538 0000056D 8E                  <2>  db 0x8E
   538 0000056E 0000                <2>  dw 0
   538 00000570 0000                <2>  dw 0
   538 00000572 1000                <2>  dw 0x10
   538 00000574 00                  <2>  db 0
   538 00000575 8E                  <2>  db 0x8E
   538 00000576 0000                <2>  dw 0
   538 00000578 0000                <2>  dw 0
   538 0000057A 1000                <2>  dw 0x10
   538 0000057C 00                  <2>  db 0
   538 0000057D 8E                  <2>  db 0x8E
   538 0000057E 0000                <2>  dw 0
   538 00000580 0000                <2>  dw 0
   538 00000582 1000                <2>  dw 0x10
   538 00000584 00                  <2>  db 0
   538 00000585 8E                  <2>  db 0x8E
   538 00000586 0000                <2>  dw 0
   538 00000588 0000                <2>  dw 0
   538 0000058A 1000                <2>  dw 0x10
   538 0000058C 00                  <2>  db 0
   538 0000058D 8E                  <2>  db 0x8E
   538 0000058E 0000                <2>  dw 0
   538 00000590 0000                <2>  dw 0
   538 00000592 1000                <2>  dw 0x10
   538 00000594 00                  <2>  db 0
   538 00000595 8E                  <2>  db 0x8E
   538 00000596 0000                <2>  dw 0
   538 00000598 0000                <2>  dw 0
   538 0000059A 1000                <2>  dw 0x10
   538 0000059C 00                  <2>  db 0
   538 0000059D 8E                  <2>  db 0x8E
   538 0000059E 0000                <2>  dw 0
   538 000005A0 0000                <2>  dw 0
   538 000005A2 1000                <2>  dw 0x10
   538 000005A4 00                  <2>  db 0
   538 000005A5 8E                  <2>  db 0x8E
   538 000005A6 0000                <2>  dw 0
   538 000005A8 0000                <2>  dw 0
   538 000005AA 1000                <2>  dw 0x10
   538 000005AC 00                  <2>  db 0
   538 000005AD 8E                  <2>  db 0x8E
   538 000005AE 0000                <2>  dw 0
   538 000005B0 0000                <2>  dw 0
   538 000005B2 1000                <2>  dw 0x10
   538 000005B4 00                  <2>  db 0
   538 000005B5 8E                  <2>  db 0x8E
   538 000005B6 0000                <2>  dw 0
   538 000005B8 0000                <2>  dw 0
   538 000005BA 1000                <2>  dw 0x10
   538 000005BC 00                  <2>  db 0
   538 000005BD 8E                  <2>  db 0x8E
   538 000005BE 0000                <2>  dw 0
   538 000005C0 0000                <2>  dw 0
   538 000005C2 1000                <2>  dw 0x10
   538 000005C4 00                  <2>  db 0
   538 000005C5 8E                  <2>  db 0x8E
   538 000005C6 0000                <2>  dw 0
   538 000005C8 0000                <2>  dw 0
   538 000005CA 1000                <2>  dw 0x10
   538 000005CC 00                  <2>  db 0
   538 000005CD 8E                  <2>  db 0x8E
   538 000005CE 0000                <2>  dw 0
   538 000005D0 0000                <2>  dw 0
   538 000005D2 1000                <2>  dw 0x10
   538 000005D4 00                  <2>  db 0
   538 000005D5 8E                  <2>  db 0x8E
   538 000005D6 0000                <2>  dw 0
   538 000005D8 0000                <2>  dw 0
   538 000005DA 1000                <2>  dw 0x10
   538 000005DC 00                  <2>  db 0
   538 000005DD 8E                  <2>  db 0x8E
   538 000005DE 0000                <2>  dw 0
   538 000005E0 0000                <2>  dw 0
   538 000005E2 1000                <2>  dw 0x10
   538 000005E4 00                  <2>  db 0
   538 000005E5 8E                  <2>  db 0x8E
   538 000005E6 0000                <2>  dw 0
   539                              <1> ;
   540                              <1> ; Vector 29 (VMM Communication Exception)
   541                              <1> ;
   542 000005E8 EAFA                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) & 0xffff)  ; Offset low bits 15..0
   543 000005EA 1000                <1>     dw      0x10                                 ; Selector
   544 000005EC 00                  <1>     db      0                                    ; Reserved
   545 000005ED 8E                  <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   546 000005EE FFFF                <1>     dw      (ADDR_OF(SevEsIdtVmmComm) >> 16)     ; Offset high bits 31..16
   547                              <1> ;
   548                              <1> ; Vectors 30 - 31 (No handlers)
   549                              <1> ;
   550                              <1> %rep 2
   551                              <1>     dw      0                                    ; Offset low bits 15..0
   552                              <1>     dw      0x10                                 ; Selector
   553                              <1>     db      0                                    ; Reserved
   554                              <1>     db      0x8E                                 ; Gate Type (IA32_IDT_GATE_TYPE_INTERRUPT_32)
   555                              <1>     dw      0                                    ; Offset high bits 31..16
   556                              <1> %endrep
   556 000005F0 0000                <2>  dw 0
   556 000005F2 1000                <2>  dw 0x10
   556 000005F4 00                  <2>  db 0
   556 000005F5 8E                  <2>  db 0x8E
   556 000005F6 0000                <2>  dw 0
   556 000005F8 0000                <2>  dw 0
   556 000005FA 1000                <2>  dw 0x10
   556 000005FC 00                  <2>  db 0
   556 000005FD 8E                  <2>  db 0x8E
   556 000005FE 0000                <2>  dw 0
   557                              <1> IDT_END:
   127                                  %include "Ia32/PageTables64.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Sets the CR3 register for 64-bit paging
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2013, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; Copyright (c) 2017 - 2020, Advanced Micro Devices, Inc. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    32
    12                              <1> 
    13                              <1> %define PAGE_PRESENT            0x01
    14                              <1> %define PAGE_READ_WRITE         0x02
    15                              <1> %define PAGE_USER_SUPERVISOR    0x04
    16                              <1> %define PAGE_WRITE_THROUGH      0x08
    17                              <1> %define PAGE_CACHE_DISABLE     0x010
    18                              <1> %define PAGE_ACCESSED          0x020
    19                              <1> %define PAGE_DIRTY             0x040
    20                              <1> %define PAGE_PAT               0x080
    21                              <1> %define PAGE_GLOBAL           0x0100
    22                              <1> %define PAGE_2M_MBO            0x080
    23                              <1> %define PAGE_2M_PAT          0x01000
    24                              <1> 
    28                              <1> %define PAGE_4K_PDE_ATTR (PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
    29                              <1> 
    34                              <1> %define PAGE_2M_PDE_ATTR (PAGE_2M_MBO +                           PAGE_ACCESSED +                           PAGE_DIRTY +                           PAGE_READ_WRITE +                           PAGE_PRESENT)
    35                              <1> 
    38                              <1> %define PAGE_PDP_ATTR (PAGE_ACCESSED +                        PAGE_READ_WRITE +                        PAGE_PRESENT)
    39                              <1> 
    40                              <1> %define TDX_BSP         1
    41                              <1> %define TDX_AP          2
    42                              <1> 
    43                              <1> ;
    44                              <1> ; Modified:  EAX, EBX, ECX, EDX
    45                              <1> ;
    46                              <1> SetCr3ForPageTables64:
    47                              <1>     ; Check the TDX features.
    48                              <1>     ; If it is TDX APs, then jump to SetCr3 directly.
    49                              <1>     ; In TD guest the initialization is done by BSP, including building
    50                              <1>     ; the page tables. APs will spin on until byte[TDX_WORK_AREA_PGTBL_READY]
    51                              <1>     ; is set.
    52                              <1>     OneTimeCall   CheckTdxFeaturesBeforeBuildPagetables
    52 00000600 E969010000          <2>  jmp %1
    52                              <2> %1 %+ OneTimerCallReturn:
    53 00000605 83F801              <1>     cmp       eax, TDX_BSP
    54 00000608 7413                <1>     je        ClearOvmfPageTables
    55 0000060A 83F802              <1>     cmp       eax, TDX_AP
    56 0000060D 0F8494000000        <1>     je        SetCr3
    57                              <1> 
    58                              <1>     ; Check whether the SEV is active and populate the SevEsWorkArea
    59                              <1>     OneTimeCall   CheckSevFeatures
    59 00000613 E9FFFCFFFF          <2>  jmp %1
    59                              <2> %1 %+ OneTimerCallReturn:
    60                              <1> 
    61                              <1>     ; If SEV is enabled, the C-bit position is always above 31.
    62                              <1>     ; The mask will be saved in the EDX and applied during the
    63                              <1>     ; the page table build below.
    64                              <1>     OneTimeCall   GetSevCBitMaskAbove31
    64 00000618 E9E4FCFFFF          <2>  jmp %1
    64                              <2> %1 %+ OneTimerCallReturn:
    65                              <1> 
    66                              <1> ClearOvmfPageTables:
    67                              <1>     ;
    68                              <1>     ; For OVMF, build some initial page tables at
    69                              <1>     ; PcdOvmfSecPageTablesBase - (PcdOvmfSecPageTablesBase + 0x6000).
    70                              <1>     ;
    71                              <1>     ; This range should match with PcdOvmfSecPageTablesSize which is
    72                              <1>     ; declared in the FDF files.
    73                              <1>     ;
    74                              <1>     ; At the end of PEI, the pages tables will be rebuilt into a
    75                              <1>     ; more permanent location by DxeIpl.
    76                              <1>     ;
    77                              <1> 
    78 0000061D B900180000          <1>     mov     ecx, 6 * 0x1000 / 4
    79 00000622 31C0                <1>     xor     eax, eax
    80                              <1> clearPageTablesMemoryLoop:
    81 00000624 89048DFCFF7F00      <1>     mov     dword[ecx * 4 + PT_ADDR (0) - 4], eax
    82 0000062B E2F7                <1>     loop    clearPageTablesMemoryLoop
    83                              <1> 
    84                              <1>     ;
    85                              <1>     ; Top level Page Directory Pointers (1 * 512GB entry)
    86                              <1>     ;
    87 0000062D C70500008000231080- <1>     mov     dword[PT_ADDR (0)], PT_ADDR (0x1000) + PAGE_PDP_ATTR
    87 00000636 00                  <1>
    88 00000637 891504008000        <1>     mov     dword[PT_ADDR (4)], edx
    89                              <1> 
    90                              <1>     ;
    91                              <1>     ; Next level Page Directory Pointers (4 * 1GB entries => 4GB)
    92                              <1>     ;
    93 0000063D C70500108000232080- <1>     mov     dword[PT_ADDR (0x1000)], PT_ADDR (0x2000) + PAGE_PDP_ATTR
    93 00000646 00                  <1>
    94 00000647 891504108000        <1>     mov     dword[PT_ADDR (0x1004)], edx
    95 0000064D C70508108000233080- <1>     mov     dword[PT_ADDR (0x1008)], PT_ADDR (0x3000) + PAGE_PDP_ATTR
    95 00000656 00                  <1>
    96 00000657 89150C108000        <1>     mov     dword[PT_ADDR (0x100C)], edx
    97 0000065D C70510108000234080- <1>     mov     dword[PT_ADDR (0x1010)], PT_ADDR (0x4000) + PAGE_PDP_ATTR
    97 00000666 00                  <1>
    98 00000667 891514108000        <1>     mov     dword[PT_ADDR (0x1014)], edx
    99 0000066D C70518108000235080- <1>     mov     dword[PT_ADDR (0x1018)], PT_ADDR (0x5000) + PAGE_PDP_ATTR
    99 00000676 00                  <1>
   100 00000677 89151C108000        <1>     mov     dword[PT_ADDR (0x101C)], edx
   101                              <1> 
   102                              <1>     ;
   103                              <1>     ; Page Table Entries (2048 * 2MB entries => 4GB)
   104                              <1>     ;
   105 0000067D B900080000          <1>     mov     ecx, 0x800
   106                              <1> pageTableEntriesLoop:
   107 00000682 89C8                <1>     mov     eax, ecx
   108 00000684 48                  <1>     dec     eax
   109 00000685 C1E015              <1>     shl     eax, 21
   110 00000688 05E3000000          <1>     add     eax, PAGE_2M_PDE_ATTR
   111 0000068D 8904CDF81F8000      <1>     mov     [ecx * 8 + PT_ADDR (0x2000 - 8)], eax
   112 00000694 8914CDFC1F8000      <1>     mov     [(ecx * 8 + PT_ADDR (0x2000 - 8)) + 4], edx
   113 0000069B E2E5                <1>     loop    pageTableEntriesLoop
   114                              <1> 
   115                              <1>     ; Clear the C-bit from the GHCB page if the SEV-ES is enabled.
   116                              <1>     OneTimeCall   SevClearPageEncMaskForGhcbPage
   116 0000069D E904FCFFFF          <2>  jmp %1
   116                              <2> %1 %+ OneTimerCallReturn:
   117                              <1> 
   118                              <1>     ; TDX will do some PostBuildPages task, such as setting
   119                              <1>     ; byte[TDX_WORK_AREA_PGTBL_READY].
   120                              <1>     OneTimeCall   TdxPostBuildPageTables
   120 000006A2 E9DF000000          <2>  jmp %1
   120                              <2> %1 %+ OneTimerCallReturn:
   121                              <1> 
   122                              <1> SetCr3:
   123                              <1>     ;
   124                              <1>     ; Set CR3 now that the paging structures are available
   125                              <1>     ;
   126 000006A7 B800008000          <1>     mov     eax, PT_ADDR (0)
   127 000006AC 0F22D8              <1>     mov     cr3, eax
   128                              <1> 
   129                              <1>     OneTimeCallRet SetCr3ForPageTables64
   129 000006AF E951FBFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   128                                  %include "Ia32/IntelTdx.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ;   Intel TDX routines
     4                              <1> ;
     5                              <1> ; Copyright (c) 2021, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define VM_GUEST_TDX     2
    11                              <1> 
    12                              <1> BITS 32
    13                              <1> 
    14                              <1> ;
    15                              <1> ; Check if it is Intel Tdx
    16                              <1> ;
    17                              <1> ; Modified: EAX, EBX, ECX, EDX
    18                              <1> ;
    19                              <1> ; If it is Intel Tdx, EAX is 1
    20                              <1> ; If it is not Intel Tdx, EAX is 0
    21                              <1> ;
    22                              <1> IsTdx:
    23                              <1>     ;
    24                              <1>     ; CPUID (0)
    25                              <1>     ;
    26 000006B4 B800000000          <1>     mov     eax, 0
    27 000006B9 0FA2                <1>     cpuid
    28 000006BB 81FB47656E75        <1>     cmp     ebx, 0x756e6547  ; "Genu"
    29 000006C1 7556                <1>     jne     IsNotTdx
    30 000006C3 81FA696E6549        <1>     cmp     edx, 0x49656e69  ; "ineI"
    31 000006C9 754E                <1>     jne     IsNotTdx
    32 000006CB 81F96E74656C        <1>     cmp     ecx, 0x6c65746e  ; "ntel"
    33 000006D1 7546                <1>     jne     IsNotTdx
    34                              <1> 
    35                              <1>     ;
    36                              <1>     ; CPUID (1)
    37                              <1>     ;
    38 000006D3 B801000000          <1>     mov     eax, 1
    39 000006D8 0FA2                <1>     cpuid
    40 000006DA F7C100000080        <1>     test    ecx, 0x80000000
    41 000006E0 7437                <1>     jz      IsNotTdx
    42                              <1> 
    43                              <1>     ;
    44                              <1>     ; CPUID[0].EAX >= 0x21?
    45                              <1>     ;
    46 000006E2 B800000000          <1>     mov     eax, 0
    47 000006E7 0FA2                <1>     cpuid
    48 000006E9 83F821              <1>     cmp     eax, 0x21
    49 000006EC 7C2B                <1>     jl      IsNotTdx
    50                              <1> 
    51                              <1>     ;
    52                              <1>     ; CPUID (0x21,0)
    53                              <1>     ;
    54 000006EE B821000000          <1>     mov     eax, 0x21
    55 000006F3 B900000000          <1>     mov     ecx, 0
    56 000006F8 0FA2                <1>     cpuid
    57                              <1> 
    58 000006FA 81FB496E7465        <1>     cmp     ebx, 0x65746E49   ; "Inte"
    59 00000700 7517                <1>     jne     IsNotTdx
    60 00000702 81FA6C544458        <1>     cmp     edx, 0x5844546C   ; "lTDX"
    61 00000708 750F                <1>     jne     IsNotTdx
    62 0000070A 81F920202020        <1>     cmp     ecx, 0x20202020   ; "    "
    63 00000710 7507                <1>     jne     IsNotTdx
    64                              <1> 
    65 00000712 B801000000          <1>     mov     eax, 1
    66 00000717 EB02                <1>     jmp     ExitIsTdx
    67                              <1> 
    68                              <1> IsNotTdx:
    69 00000719 31C0                <1>     xor     eax, eax
    70                              <1> 
    71                              <1> ExitIsTdx:
    72                              <1> 
    73                              <1>   OneTimeCallRet IsTdx
    73 0000071B EB02                <2>  jmp %1 %+ OneTimerCallReturn
    74                              <1> 
    75                              <1> ;
    76                              <1> ; Initialize work area if it is Tdx guest. Detailed definition is in
    77                              <1> ; OvmfPkg/Include/WorkArea.h.
    78                              <1> ; BSP and APs all go here. Only BSP initialize this work area.
    79                              <1> ;
    80                              <1> ; Param[in] EBX[5:0]    CPU Supported GPAW (48 or 52)
    81                              <1> ; Param[in] ESI[31:0]   vCPU ID (BSP is 0, others are AP)
    82                              <1> ;
    83                              <1> ; Modified:  EBX
    84                              <1> ;
    85                              <1> InitTdxWorkarea:
    86                              <1> 
    87                              <1>     ;
    88                              <1>     ; First check if it is Tdx
    89                              <1>     ;
    90                              <1>     OneTimeCall IsTdx
    90 0000071D EB95                <2>  jmp %1
    90                              <2> %1 %+ OneTimerCallReturn:
    91                              <1> 
    92 0000071F 85C0                <1>     test    eax, eax
    93 00000721 7420                <1>     jz      ExitInitTdxWorkarea
    94                              <1> 
    95 00000723 83FE00              <1>     cmp     esi, 0
    96 00000726 740B                <1>     je      TdxBspEntry
    97                              <1> 
    98                              <1>     ;
    99                              <1>     ; In Td guest, BSP/AP shares the same entry point
   100                              <1>     ; BSP builds up the page table, while APs shouldn't do the same task.
   101                              <1>     ; Instead, APs just leverage the page table which is built by BSP.
   102                              <1>     ; APs will wait until the page table is ready.
   103                              <1>     ;
   104                              <1> TdxApWait:
   105 00000728 803D04B0800000      <1>     cmp     byte[TDX_WORK_AREA_PGTBL_READY], 0
   106 0000072F 74F7                <1>     je      TdxApWait
   107 00000731 EB10                <1>     jmp     ExitInitTdxWorkarea
   108                              <1> 
   109                              <1> TdxBspEntry:
   110                              <1>     ;
   111                              <1>     ; Set Type of WORK_AREA_GUEST_TYPE so that the following code can use
   112                              <1>     ; these information.
   113                              <1>     ;
   114 00000733 C60500B0800002      <1>     mov     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   115                              <1> 
   116                              <1>     ;
   117                              <1>     ; EBX[5:0] CPU supported GPA width
   118                              <1>     ;
   119 0000073A 83E33F              <1>     and     ebx, 0x3f
   120 0000073D 891D08B08000        <1>     mov     DWORD[TDX_WORK_AREA_GPAW], ebx
   121                              <1> 
   122                              <1> ExitInitTdxWorkarea:
   123                              <1>     OneTimeCallRet InitTdxWorkarea
   123 00000743 EB24                <2>  jmp %1 %+ OneTimerCallReturn
   124                              <1> 
   125                              <1> ;
   126                              <1> ; Load the GDT and set the CS/DS/ES/FS/GS/SS.
   127                              <1> ;
   128                              <1> ; Modified:  EAX, DS, ES, FS, GS, SS, CS
   129                              <1> ;
   130                              <1> ReloadFlat32:
   131                              <1> 
   132 00000745 FA                  <1>     cli
   133 00000746 B8D8FEFFFF          <1>     mov     eax, ADDR_OF(gdtr)
   134 0000074B 0F0110              <1>     lgdt    [eax]
   135                              <1> 
   136 0000074E EAF5FDFFFF1000      <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpToFlat32BitAndLandHere)
   137                              <1> 
   138                              <1> jumpToFlat32BitAndLandHere:
   139                              <1> 
   140                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
   141                              <1> 
   142 00000755 66B80800            <1>     mov     ax, LINEAR_SEL
   143 00000759 8ED8                <1>     mov     ds, ax
   144 0000075B 8EC0                <1>     mov     es, ax
   145 0000075D 8EE0                <1>     mov     fs, ax
   146 0000075F 8EE8                <1>     mov     gs, ax
   147 00000761 8ED0                <1>     mov     ss, ax
   148                              <1> 
   149                              <1>     OneTimeCallRet ReloadFlat32
   149 00000763 EB02                <2>  jmp %1 %+ OneTimerCallReturn
   150                              <1> 
   151                              <1> ;
   152                              <1> ; Tdx initialization after entering into ResetVector
   153                              <1> ;
   154                              <1> ; Modified:  EAX, EBX, ECX, EDX, EBP, EDI, ESP
   155                              <1> ;
   156                              <1> InitTdx:
   157                              <1>     ;
   158                              <1>     ; First load the GDT and jump to Flat32 mode
   159                              <1>     ;
   160                              <1>     OneTimeCall ReloadFlat32
   160 00000765 EBDE                <2>  jmp %1
   160                              <2> %1 %+ OneTimerCallReturn:
   161                              <1> 
   162                              <1>     ;
   163                              <1>     ; Initialization of Tdx work area
   164                              <1>     ;
   165                              <1>     OneTimeCall  InitTdxWorkarea
   165 00000767 EBB4                <2>  jmp %1
   165                              <2> %1 %+ OneTimerCallReturn:
   166                              <1> 
   167                              <1>     OneTimeCallRet InitTdx
   167 00000769 E91B010000          <2>  jmp %1 %+ OneTimerCallReturn
   168                              <1> 
   169                              <1> ;
   170                              <1> ; Check TDX features, TDX or TDX-BSP or TDX-APs?
   171                              <1> ;
   172                              <1> ; By design TDX BSP is reponsible for initializing the PageTables.
   173                              <1> ; After PageTables are ready, byte[TDX_WORK_AREA_PGTBL_READY] is set to 1.
   174                              <1> ; APs will spin when byte[TDX_WORK_AREA_PGTBL_READY] is 0 until it is set to 1.
   175                              <1> ;
   176                              <1> ; When this routine is run on TDX BSP, byte[TDX_WORK_AREA_PGTBL_READY] should be 0.
   177                              <1> ; When this routine is run on TDX APs, byte[TDX_WORK_AREA_PGTBL_READY] should be 1.
   178                              <1> ;
   179                              <1> ;
   180                              <1> ; Modified:  EAX, EDX
   181                              <1> ;
   182                              <1> ; 0-NonTdx, 1-TdxBsp, 2-TdxAps
   183                              <1> ;
   184                              <1> CheckTdxFeaturesBeforeBuildPagetables:
   185 0000076E 31C0                <1>     xor     eax, eax
   186 00000770 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   187 00000777 7508                <1>     jne     NotTdx
   188                              <1> 
   189 00000779 31D2                <1>     xor     edx, edx
   190 0000077B A004B08000          <1>     mov     al, byte[TDX_WORK_AREA_PGTBL_READY]
   191 00000780 40                  <1>     inc     eax
   192                              <1> 
   193                              <1> NotTdx:
   194                              <1>     OneTimeCallRet CheckTdxFeaturesBeforeBuildPagetables
   194 00000781 E97FFEFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   195                              <1> 
   196                              <1> ;
   197                              <1> ; Set byte[TDX_WORK_AREA_PGTBL_READY] to 1
   198                              <1> ;
   199                              <1> TdxPostBuildPageTables:
   200 00000786 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   201 0000078D 7507                <1>     jne     ExitTdxPostBuildPageTables
   202 0000078F C60504B0800001      <1>     mov     byte[TDX_WORK_AREA_PGTBL_READY], 1
   203                              <1> 
   204                              <1> ExitTdxPostBuildPageTables:
   205                              <1>     OneTimeCallRet TdxPostBuildPageTables
   205 00000796 E90CFFFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   206                              <1> 
   207                              <1> ;
   208                              <1> ; Check if TDX is enabled
   209                              <1> ;
   210                              <1> ; Modified:  EAX
   211                              <1> ;
   212                              <1> ; If TDX is enabled then EAX will be 1
   213                              <1> ; If TDX is disabled then EAX will be 0.
   214                              <1> ;
   215                              <1> IsTdxEnabled:
   216 0000079B 31C0                <1>     xor     eax, eax
   217 0000079D 803D00B0800002      <1>     cmp     byte[WORK_AREA_GUEST_TYPE], VM_GUEST_TDX
   218 000007A4 7505                <1>     jne     TdxNotEnabled
   219 000007A6 B801000000          <1>     mov     eax, 1
   220                              <1> 
   221                              <1> TdxNotEnabled:
   222                              <1>     OneTimeCallRet IsTdxEnabled
   222 000007AB E966FAFFFF          <2>  jmp %1 %+ OneTimerCallReturn
   129                                  %include "X64/OvmfSevMetadata.asm"
     1                              <1> ;-----------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; OVMF metadata for the AMD SEV confidential computing guests
     4                              <1> ;
     5                              <1> ; Copyright (c) 2021, AMD Inc. All rights reserved.<BR>
     6                              <1> ;
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;-----------------------------------------------------------------------------
     9                              <1> 
    10                              <1> BITS  64
    11                              <1> 
    12                              <1> %define OVMF_SEV_METADATA_VERSION     1
    13                              <1> 
    14                              <1> ; The section must be accepted or validated by the VMM before the boot
    15                              <1> %define OVMF_SECTION_TYPE_SNP_SEC_MEM     0x1
    16                              <1> 
    17                              <1> ; AMD SEV-SNP specific sections
    18                              <1> %define OVMF_SECTION_TYPE_SNP_SECRETS     0x2
    19                              <1> 
    20                              <1> ;
    21                              <1> ; The section contains the hypervisor pre-populated CPUID values.
    22                              <1> ; In the case of SEV-SNP, the CPUID values are filtered and measured by
    23                              <1> ; the SEV-SNP firmware.
    24                              <1> ; The CPUID format is documented in SEV-SNP firmware spec 0.9 section 7.1
    25                              <1> ; (CPUID function structure).
    26                              <1> ;
    27                              <1> %define OVMF_SECTION_TYPE_CPUID           0x3
    28                              <1> 
    29                              <1> 
    30                              <1> ALIGN 16
    31                              <1> 
    32 000007B0 00<rept>            <1> TIMES (15 - ((OvmfSevGuidedStructureEnd - OvmfSevGuidedStructureStart + 15) % 16)) DB 0
    33                              <1> 
    34                              <1> OvmfSevGuidedStructureStart:
    35                              <1> ;
    36                              <1> ; OvmfSev metadata descriptor
    37                              <1> ;
    38                              <1> OvmfSevMetadataGuid:
    39                              <1> 
    40                              <1> _DescriptorSev:
    41 000007B4 41534556            <1>   DB 'A','S','E','V'                                        ; Signature
    42 000007B8 4C000000            <1>   DD OvmfSevGuidedStructureEnd - _DescriptorSev             ; Length
    43 000007BC 01000000            <1>   DD OVMF_SEV_METADATA_VERSION                              ; Version
    44 000007C0 05000000            <1>   DD (OvmfSevGuidedStructureEnd - _DescriptorSev - 16) / 12 ; Number of sections
    45                              <1> 
    46                              <1> ; Region need to be pre-validated by the hypervisor
    47                              <1> PreValidate1:
    48 000007C4 00008000            <1>   DD  SNP_SEC_MEM_BASE_DESC_1
    49 000007C8 00900000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_1
    50 000007CC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    51                              <1> PreValidate2:
    52 000007D0 00A08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_2
    53 000007D4 00300000            <1>   DD  SNP_SEC_MEM_SIZE_DESC_2
    54 000007D8 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    55                              <1> 
    56                              <1> ; SEV-SNP Secrets page
    57                              <1> SevSnpSecrets:
    58 000007DC 00D08000            <1>   DD  SEV_SNP_SECRETS_BASE
    59 000007E0 00100000            <1>   DD  SEV_SNP_SECRETS_SIZE
    60 000007E4 02000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SECRETS
    61                              <1> 
    62                              <1> ; CPUID values
    63                              <1> CpuidSec:
    64 000007E8 00E08000            <1>   DD  CPUID_BASE
    65 000007EC 00100000            <1>   DD  CPUID_SIZE
    66 000007F0 03000000            <1>   DD  OVMF_SECTION_TYPE_CPUID
    67                              <1> 
    68                              <1> ; Region need to be pre-validated by the hypervisor
    69                              <1> PreValidate3:
    70 000007F4 00F08000            <1>   DD  SNP_SEC_MEM_BASE_DESC_3
    71 000007F8 00100100            <1>   DD  SNP_SEC_MEM_SIZE_DESC_3
    72 000007FC 01000000            <1>   DD  OVMF_SECTION_TYPE_SNP_SEC_MEM
    73                              <1> OvmfSevGuidedStructureEnd:
    74                              <1>   ALIGN   16
   130                                  %endif
   131                                  
   132                                  %include "Ia16/Real16ToFlat32.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Transition from 16 bit real mode into 32 bit flat protected mode
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2010, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> %define SEC_DEFAULT_CR0  0x40000023
    11                              <1> %define SEC_DEFAULT_CR4  0x640
    12                              <1> 
    13                              <1> BITS    16
    14                              <1> 
    15                              <1> ;
    16                              <1> ; Modified:  EAX, EBX
    17                              <1> ;
    18                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
    19                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
    20                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
    21                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
    22                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
    23                              <1> ;
    24                              <1> TransitionFromReal16To32BitFlat:
    25                              <1> 
    26                              <1>     debugShowPostCode POSTCODE_16BIT_MODE
    27                              <1> 
    28 00000800 FA                  <1>     cli
    29                              <1> 
    30 00000801 BB00F0              <1>     mov     bx, 0xf000
    31 00000804 8EDB                <1>     mov     ds, bx
    32                              <1> 
    33 00000806 BBD8FE              <1>     mov     bx, ADDR16_OF(gdtr)
    34                              <1> 
    35 00000809 2E660F0117          <1> o32 lgdt    [cs:bx]
    36                              <1> 
    37 0000080E 66B823000040        <1>     mov     eax, SEC_DEFAULT_CR0
    38 00000814 0F22C0              <1>     mov     cr0, eax
    39                              <1> 
    40 00000817 66EABFFEFFFF1000    <1>     jmp     LINEAR_CODE_SEL:dword ADDR_OF(jumpTo32BitAndLandHere)
    41                              <1> BITS    32
    42                              <1> jumpTo32BitAndLandHere:
    43                              <1> 
    44 0000081F B840060000          <1>     mov     eax, SEC_DEFAULT_CR4
    45 00000824 0F22E0              <1>     mov     cr4, eax
    46                              <1> 
    47                              <1>     debugShowPostCode POSTCODE_32BIT_MODE
    48                              <1> 
    49 00000827 66B80800            <1>     mov     ax, LINEAR_SEL
    50 0000082B 8ED8                <1>     mov     ds, ax
    51 0000082D 8EC0                <1>     mov     es, ax
    52 0000082F 8EE0                <1>     mov     fs, ax
    53 00000831 8EE8                <1>     mov     gs, ax
    54 00000833 8ED0                <1>     mov     ss, ax
    55                              <1> 
    56                              <1>     OneTimeCallRet TransitionFromReal16To32BitFlat
    56 00000835 EB44                <2>  jmp %1 %+ OneTimerCallReturn
    57                              <1> 
    58 00000837 90                  <1> ALIGN   2
    59                              <1> 
    60                              <1> gdtr:
    61 00000838 2700                <1>     dw      GDT_END - GDT_BASE - 1   ; GDT limit
    62 0000083A E0FEFFFF            <1>     dd      ADDR_OF(GDT_BASE)
    63                              <1> 
    64 0000083E 90<rept>            <1> ALIGN   16
    65                              <1> 
    66                              <1> ;
    67                              <1> ; Macros for GDT entries
    68                              <1> ;
    69                              <1> 
    70                              <1> %define  PRESENT_FLAG(p) (p << 7)
    71                              <1> %define  DPL(dpl) (dpl << 5)
    72                              <1> %define  SYSTEM_FLAG(s) (s << 4)
    73                              <1> %define  DESC_TYPE(t) (t)
    74                              <1> 
    75                              <1> ; Type: data, expand-up, writable, accessed
    76                              <1> %define  DATA32_TYPE 3
    77                              <1> 
    78                              <1> ; Type: execute, readable, expand-up, accessed
    79                              <1> %define  CODE32_TYPE 0xb
    80                              <1> 
    81                              <1> ; Type: execute, readable, expand-up, accessed
    82                              <1> %define  CODE64_TYPE 0xb
    83                              <1> 
    84                              <1> %define  GRANULARITY_FLAG(g) (g << 7)
    85                              <1> %define  DEFAULT_SIZE32(d) (d << 6)
    86                              <1> %define  CODE64_FLAG(l) (l << 5)
    87                              <1> %define  UPPER_LIMIT(l) (l)
    88                              <1> 
    89                              <1> ;
    90                              <1> ; The Global Descriptor Table (GDT)
    91                              <1> ;
    92                              <1> 
    93                              <1> GDT_BASE:
    94                              <1> ; null descriptor
    95                              <1> NULL_SEL            equ $-GDT_BASE
    96 00000840 0000                <1>     DW      0            ; limit 15:0
    97 00000842 0000                <1>     DW      0            ; base 15:0
    98 00000844 00                  <1>     DB      0            ; base 23:16
    99 00000845 00                  <1>     DB      0            ; sys flag, dpl, type
   100 00000846 00                  <1>     DB      0            ; limit 19:16, flags
   101 00000847 00                  <1>     DB      0            ; base 31:24
   102                              <1> 
   103                              <1> ; linear data segment descriptor
   104                              <1> LINEAR_SEL          equ $-GDT_BASE
   105 00000848 FFFF                <1>     DW      0xffff       ; limit 15:0
   106 0000084A 0000                <1>     DW      0            ; base 15:0
   107 0000084C 00                  <1>     DB      0            ; base 23:16
   108 0000084D 93                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(DATA32_TYPE)
   109 0000084E CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   110 0000084F 00                  <1>     DB      0            ; base 31:24
   111                              <1> 
   112                              <1> ; linear code segment descriptor
   113                              <1> LINEAR_CODE_SEL     equ $-GDT_BASE
   114 00000850 FFFF                <1>     DW      0xffff       ; limit 15:0
   115 00000852 0000                <1>     DW      0            ; base 15:0
   116 00000854 00                  <1>     DB      0            ; base 23:16
   117 00000855 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   118 00000856 CF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(1)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   119 00000857 00                  <1>     DB      0            ; base 31:24
   120                              <1> 
   121                              <1> %ifdef ARCH_X64
   122                              <1> ; linear code (64-bit) segment descriptor
   123                              <1> LINEAR_CODE64_SEL   equ $-GDT_BASE
   124 00000858 FFFF                <1>     DW      0xffff       ; limit 15:0
   125 0000085A 0000                <1>     DW      0            ; base 15:0
   126 0000085C 00                  <1>     DB      0            ; base 23:16
   127 0000085D 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE64_TYPE)
   128 0000085E AF                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(1)|UPPER_LIMIT(0xf)
   129 0000085F 00                  <1>     DB      0            ; base 31:24
   130                              <1> %endif
   131                              <1> 
   132                              <1> ; linear code segment descriptor
   133                              <1> LINEAR_CODE16_SEL     equ $-GDT_BASE
   134 00000860 FFFF                <1>     DW      0xffff       ; limit 15:0
   135 00000862 0000                <1>     DW      0            ; base 15:0
   136 00000864 00                  <1>     DB      0            ; base 23:16
   137 00000865 9B                  <1>     DB      PRESENT_FLAG(1)|DPL(0)|SYSTEM_FLAG(1)|DESC_TYPE(CODE32_TYPE)
   138 00000866 8F                  <1>     DB      GRANULARITY_FLAG(1)|DEFAULT_SIZE32(0)|CODE64_FLAG(0)|UPPER_LIMIT(0xf)
   139 00000867 00                  <1>     DB      0            ; base 31:24
   140                              <1> 
   141                              <1> GDT_END:
   142                              <1> 
   133                                  %include "Ia16/Init16.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; 16-bit initialization code
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13                              <1> ;
    14                              <1> ; @param[out] DI    'BP' to indicate boot-strap processor
    15                              <1> ;
    16                              <1> EarlyBspInitReal16:
    17 00000868 BF4250              <1>     mov     di, 'BP'
    18 0000086B EB0A                <1>     jmp     short Main16
    19                              <1> 
    20                              <1> ;
    21                              <1> ; @param[out] DI    'AP' to indicate application processor
    22                              <1> ;
    23                              <1> EarlyApInitReal16:
    24 0000086D BF4150              <1>     mov     di, 'AP'
    25 00000870 EB05                <1>     jmp     short Main16
    26                              <1> 
    27                              <1> ;
    28                              <1> ; Modified:  EAX
    29                              <1> ;
    30                              <1> ; @param[in]  EAX   Initial value of the EAX register (BIST: Built-in Self Test)
    31                              <1> ; @param[out] ESP   Initial value of the EAX register (BIST: Built-in Self Test)
    32                              <1> ;
    33                              <1> EarlyInit16:
    34                              <1>     ;
    35                              <1>     ; ESP -  Initial value of the EAX register (BIST: Built-in Self Test)
    36                              <1>     ;
    37 00000872 6689C4              <1>     mov     esp, eax
    38                              <1> 
    39                              <1>     debugInitialize
    39                              <2> 
    39                              <2> 
    39                              <2> 
    40                              <1> 
    41                              <1>     OneTimeCallRet EarlyInit16
    41 00000875 EB02                <2>  jmp %1 %+ OneTimerCallReturn
    42                              <1> 
   134                                  
   135                                  %include "Main.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; Main routine of the pre-SEC code up through the jump into SEC
     4                              <1> ;
     5                              <1> ; Copyright (c) 2008 - 2009, Intel Corporation. All rights reserved.<BR>
     6                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     7                              <1> ;
     8                              <1> ;------------------------------------------------------------------------------
     9                              <1> 
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13                              <1> ;
    14                              <1> ; Modified:  EBX, ECX, EDX, EBP
    15                              <1> ;
    16                              <1> ; @param[in,out]  RAX/EAX  Initial value of the EAX register
    17                              <1> ;                          (BIST: Built-in Self Test)
    18                              <1> ; @param[in,out]  DI       'BP': boot-strap processor, or
    19                              <1> ;                          'AP': application processor
    20                              <1> ; @param[out]     RBP/EBP  Address of Boot Firmware Volume (BFV)
    21                              <1> ; @param[out]     DS       Selector allowing flat access to all addresses
    22                              <1> ; @param[out]     ES       Selector allowing flat access to all addresses
    23                              <1> ; @param[out]     FS       Selector allowing flat access to all addresses
    24                              <1> ; @param[out]     GS       Selector allowing flat access to all addresses
    25                              <1> ; @param[out]     SS       Selector allowing flat access to all addresses
    26                              <1> ;
    27                              <1> ; @return         None  This routine jumps to SEC and does not return
    28                              <1> ;
    29                              <1> Main16:
    30                              <1>     OneTimeCall EarlyInit16
    30 00000877 EBF9                <2>  jmp %1
    30                              <2> %1 %+ OneTimerCallReturn:
    31                              <1> 
    32                              <1>     ;
    33                              <1>     ; Transition the processor from 16-bit real mode to 32-bit flat mode
    34                              <1>     ;
    35                              <1>     OneTimeCall TransitionFromReal16To32BitFlat
    35 00000879 EB85                <2>  jmp %1
    35                              <2> %1 %+ OneTimerCallReturn:
    36                              <1> 
    37                              <1> BITS    32
    38                              <1> 
    39                              <1>     ; Clear the WorkArea header. The SEV probe routines will populate the
    40                              <1>     ; work area when detected.
    41 0000087B C60500B0800000      <1>     mov     byte[WORK_AREA_GUEST_TYPE], 0
    42                              <1> 
    43                              <1> %ifdef ARCH_X64
    44                              <1> 
    45 00000882 EB05                <1>     jmp SearchBfv
    46                              <1> 
    47                              <1> ;
    48                              <1> ; Entry point of Main32
    49                              <1> ;
    50                              <1> Main32:
    51                              <1>     OneTimeCall InitTdx
    51 00000884 E9DCFEFFFF          <2>  jmp %1
    51                              <2> %1 %+ OneTimerCallReturn:
    52                              <1> 
    53                              <1> SearchBfv:
    54                              <1> 
    55                              <1> %endif
    56                              <1> 
    57                              <1>     ;
    58                              <1>     ; Search for the Boot Firmware Volume (BFV)
    59                              <1>     ;
    60                              <1>     OneTimeCall Flat32SearchForBfvBase
    60 00000889 E972F7FFFF          <2>  jmp %1
    60                              <2> %1 %+ OneTimerCallReturn:
    61                              <1> 
    62                              <1>     ;
    63                              <1>     ; EBP - Start of BFV
    64                              <1>     ;
    65                              <1> 
    66                              <1>     ;
    67                              <1>     ; Search for the SEC entry point
    68                              <1>     ;
    69                              <1>     OneTimeCall Flat32SearchForSecEntryPoint
    69 0000088E E9BEF7FFFF          <2>  jmp %1
    69                              <2> %1 %+ OneTimerCallReturn:
    70                              <1> 
    71                              <1>     ;
    72                              <1>     ; ESI - SEC Core entry point
    73                              <1>     ; EBP - Start of BFV
    74                              <1>     ;
    75                              <1> 
    76                              <1> %ifdef ARCH_IA32
    77                              <1> 
    78                              <1>     ;
    79                              <1>     ; Restore initial EAX value into the EAX register
    80                              <1>     ;
    81                              <1>     mov     eax, esp
    82                              <1> 
    83                              <1>     ;
    84                              <1>     ; Jump to the 32-bit SEC entry point
    85                              <1>     ;
    86                              <1>     jmp     esi
    87                              <1> 
    88                              <1> %else
    89                              <1> 
    90                              <1>     ;
    91                              <1>     ; Transition the processor from 32-bit flat mode to 64-bit flat mode
    92                              <1>     ;
    93                              <1>     OneTimeCall Transition32FlatTo64Flat
    93 00000893 E968F9FFFF          <2>  jmp %1
    93                              <2> %1 %+ OneTimerCallReturn:
    94                              <1> 
    95                              <1> BITS    64
    96                              <1> 
    97                              <1>     ;
    98                              <1>     ; Some values were calculated in 32-bit mode.  Make sure the upper
    99                              <1>     ; 32-bits of 64-bit registers are zero for these values.
   100                              <1>     ;
   101 00000898 B8FFFFFFFF          <1>     mov     rax, 0x00000000ffffffff
   102 0000089D 4821C6              <1>     and     rsi, rax
   103 000008A0 4821C5              <1>     and     rbp, rax
   104 000008A3 4821C4              <1>     and     rsp, rax
   105                              <1> 
   106                              <1>     ;
   107                              <1>     ; RSI - SEC Core entry point
   108                              <1>     ; RBP - Start of BFV
   109                              <1>     ;
   110                              <1> 
   111                              <1>     ;
   112                              <1>     ; Restore initial EAX value into the RAX register
   113                              <1>     ;
   114 000008A6 4889E0              <1>     mov     rax, rsp
   115                              <1> 
   116                              <1>     ;
   117                              <1>     ; Jump to the 64-bit SEC entry point
   118                              <1>     ;
   119 000008A9 FFE6                <1>     jmp     rsi
   120                              <1> 
   121                              <1> %endif
   136                                  
   137                                    %define SEV_ES_AP_RESET_IP 8433668
   138                                    %define SEV_LAUNCH_SECRET_BASE 00h
   139                                    %define SEV_LAUNCH_SECRET_SIZE 00h
   140                                    %define SEV_FW_HASH_BLOCK_BASE 00h
   141                                    %define SEV_FW_HASH_BLOCK_SIZE 00h
   142                                  %include "Ia16/ResetVectorVtf0.asm"
     1                              <1> ;------------------------------------------------------------------------------
     2                              <1> ; @file
     3                              <1> ; First code executed by processor after resetting.
     4                              <1> ; Derived from UefiCpuPkg/ResetVector/Vtf0/Ia16/ResetVectorVtf0.asm
     5                              <1> ;
     6                              <1> ; Copyright (c) 2008 - 2014, Intel Corporation. All rights reserved.<BR>
     7                              <1> ; SPDX-License-Identifier: BSD-2-Clause-Patent
     8                              <1> ;
     9                              <1> ;------------------------------------------------------------------------------
    10                              <1> 
    11                              <1> BITS    16
    12                              <1> 
    13 000008AB 90<rept>            <1> ALIGN   16
    14                              <1> 
    15                              <1> ;
    16                              <1> ; Pad the image size to 4k when page tables are in VTF0
    17                              <1> ;
    18                              <1> ; If the VTF0 image has page tables built in, then we need to make
    19                              <1> ; sure the end of VTF0 is 4k above where the page tables end.
    20                              <1> ;
    21                              <1> ; This is required so the page tables will be 4k aligned when VTF0 is
    22                              <1> ; located just below 0x100000000 (4GB) in the firmware device.
    23                              <1> ;
    24                              <1> %ifdef ALIGN_TOP_TO_4K_FOR_PAGING
    25                              <1>     TIMES (0x1000 - ($ - EndOfPageTables) - 0x20) DB 0
    26                              <1> %endif
    27                              <1> 
    28                              <1> ;
    29                              <1> ; Padding to ensure first guid starts at 0xffffffd0
    30                              <1> ;
    31 000008B0 00<rept>            <1> TIMES (15 - ((guidedStructureEnd - guidedStructureStart + 15) % 16)) DB 0
    32                              <1> 
    33                              <1> ; GUIDed structure.  To traverse this you should first verify the
    34                              <1> ; presence of the table footer guid
    35                              <1> ; (96b582de-1fb2-45f7-baea-a366c55a082d) at 0xffffffd0.  If that
    36                              <1> ; is found, the two bytes at 0xffffffce are the entire table length.
    37                              <1> ;
    38                              <1> ; The table is composed of structures with the form:
    39                              <1> ;
    40                              <1> ; Data (arbitrary bytes identified by guid)
    41                              <1> ; length from start of data to end of guid (2 bytes)
    42                              <1> ; guid (16 bytes)
    43                              <1> ;
    44                              <1> ; so work back from the footer using the length to traverse until you
    45                              <1> ; either find the guid you're looking for or run off the beginning of
    46                              <1> ; the table.
    47                              <1> ;
    48                              <1> guidedStructureStart:
    49                              <1> 
    50                              <1> %ifdef ARCH_X64
    51                              <1> ;
    52                              <1> ; TDX Metadata offset block
    53                              <1> ;
    54                              <1> ; TdxMetadata.asm is included in ARCH_X64 because Inte TDX is only
    55                              <1> ; available in ARCH_X64. Below block describes the offset of
    56                              <1> ; TdxMetadata block in Ovmf image
    57                              <1> ;
    58                              <1> ; GUID : e47a6535-984a-4798-865e-4685a7bf8ec2
    59                              <1> ;
    60                              <1> tdxMetadataOffsetStart:
    61 000008B8 30080000            <1>     DD      fourGigabytes - TdxMetadataGuid - 16
    62 000008BC 1600                <1>     DW      tdxMetadataOffsetEnd - tdxMetadataOffsetStart
    63 000008BE 35657AE44A989847    <1>     DB      0x35, 0x65, 0x7a, 0xe4, 0x4a, 0x98, 0x98, 0x47
    64 000008C6 865E4685A7BF8EC2    <1>     DB      0x86, 0x5e, 0x46, 0x85, 0xa7, 0xbf, 0x8e, 0xc2
    65                              <1> tdxMetadataOffsetEnd:
    66                              <1> 
    67                              <1> ;
    68                              <1> ; SEV metadata descriptor
    69                              <1> ;
    70                              <1> ; Provide the start offset of the metadata blob within the OVMF binary.
    71                              <1> 
    72                              <1> ; GUID : dc886566-984a-4798-A75e-5585a7bf67cc
    73                              <1> ;
    74                              <1> OvmfSevMetadataOffsetStart:
    75 000008CE AC010000            <1>   DD      (fourGigabytes - OvmfSevMetadataGuid)
    76 000008D2 1600                <1>   DW      OvmfSevMetadataOffsetEnd - OvmfSevMetadataOffsetStart
    77 000008D4 666588DC4A989847    <1>   DB      0x66, 0x65, 0x88, 0xdc, 0x4a, 0x98, 0x98, 0x47
    78 000008DC A75E5585A7BF67CC    <1>   DB      0xA7, 0x5e, 0x55, 0x85, 0xa7, 0xbf, 0x67, 0xcc
    79                              <1> OvmfSevMetadataOffsetEnd:
    80                              <1> 
    81                              <1> %endif
    82                              <1> 
    83                              <1> ; SEV Hash Table Block
    84                              <1> ;
    85                              <1> ; This describes the guest ram area where the hypervisor should
    86                              <1> ; install a table describing the hashes of certain firmware configuration
    87                              <1> ; device files that would otherwise be passed in unchecked.  The current
    88                              <1> ; use is for the kernel, initrd and command line values, but others may be
    89                              <1> ; added.  The data format is:
    90                              <1> ;
    91                              <1> ; base physical address (32 bit word)
    92                              <1> ; table length (32 bit word)
    93                              <1> ;
    94                              <1> ; GUID (SEV FW config hash block): 7255371f-3a3b-4b04-927b-1da6efa8d454
    95                              <1> ;
    96                              <1> sevFwHashBlockStart:
    97 000008E4 00000000            <1>     DD      SEV_FW_HASH_BLOCK_BASE
    98 000008E8 00000000            <1>     DD      SEV_FW_HASH_BLOCK_SIZE
    99 000008EC 1A00                <1>     DW      sevFwHashBlockEnd - sevFwHashBlockStart
   100 000008EE 1F3755723B3A044B    <1>     DB      0x1f, 0x37, 0x55, 0x72, 0x3b, 0x3a, 0x04, 0x4b
   101 000008F6 927B1DA6EFA8D454    <1>     DB      0x92, 0x7b, 0x1d, 0xa6, 0xef, 0xa8, 0xd4, 0x54
   102                              <1> sevFwHashBlockEnd:
   103                              <1> 
   104                              <1> ; SEV Secret block
   105                              <1> ;
   106                              <1> ; This describes the guest ram area where the hypervisor should
   107                              <1> ; inject the secret.  The data format is:
   108                              <1> ;
   109                              <1> ; base physical address (32 bit word)
   110                              <1> ; table length (32 bit word)
   111                              <1> ;
   112                              <1> ; GUID (SEV secret block): 4c2eb361-7d9b-4cc3-8081-127c90d3d294
   113                              <1> ;
   114                              <1> sevSecretBlockStart:
   115 000008FE 00000000            <1>     DD      SEV_LAUNCH_SECRET_BASE
   116 00000902 00000000            <1>     DD      SEV_LAUNCH_SECRET_SIZE
   117 00000906 1A00                <1>     DW      sevSecretBlockEnd - sevSecretBlockStart
   118 00000908 61B32E4C9B7DC34C    <1>     DB      0x61, 0xB3, 0x2E, 0x4C, 0x9B, 0x7D, 0xC3, 0x4C
   119 00000910 8081127C90D3D294    <1>     DB      0x80, 0x81, 0x12, 0x7C, 0x90, 0xD3, 0xD2, 0x94
   120                              <1> sevSecretBlockEnd:
   121                              <1> 
   122                              <1> ;
   123                              <1> ; SEV-ES Processor Reset support
   124                              <1> ;
   125                              <1> ; sevEsResetBlock:
   126                              <1> ;   For the initial boot of an AP under SEV-ES, the "reset" RIP must be
   127                              <1> ;   programmed to the RAM area defined by SEV_ES_AP_RESET_IP. The data
   128                              <1> ;   format is:
   129                              <1> ;
   130                              <1> ;   IP value [0:15]
   131                              <1> ;   CS segment base [31:16]
   132                              <1> ;
   133                              <1> ;   GUID (SEV-ES reset block): 00f771de-1a7e-4fcb-890e-68c77e2fb44e
   134                              <1> ;
   135                              <1> ;   A hypervisor reads the CS segement base and IP value. The CS segment base
   136                              <1> ;   value represents the high order 16-bits of the CS segment base, so the
   137                              <1> ;   hypervisor must left shift the value of the CS segement base by 16 bits to
   138                              <1> ;   form the full CS segment base for the CS segment register. It would then
   139                              <1> ;   program the EIP register with the IP value as read.
   140                              <1> ;
   141                              <1> 
   142                              <1> sevEsResetBlockStart:
   143 00000918 04B08000            <1>     DD      SEV_ES_AP_RESET_IP
   144 0000091C 1600                <1>     DW      sevEsResetBlockEnd - sevEsResetBlockStart
   145 0000091E DE71F7007E1ACB4F    <1>     DB      0xDE, 0x71, 0xF7, 0x00, 0x7E, 0x1A, 0xCB, 0x4F
   146 00000926 890E68C77E2FB44E    <1>     DB      0x89, 0x0E, 0x68, 0xC7, 0x7E, 0x2F, 0xB4, 0x4E
   147                              <1> sevEsResetBlockEnd:
   148                              <1> 
   149                              <1> ;
   150                              <1> ; Table footer:
   151                              <1> ;
   152                              <1> ; length of whole table (16 bit word)
   153                              <1> ; GUID (table footer): 96b582de-1fb2-45f7-baea-a366c55a082d
   154                              <1> ;
   155 0000092E 8800                <1>     DW      guidedStructureEnd - guidedStructureStart
   156 00000930 DE82B596B21FF745    <1>     DB      0xDE, 0x82, 0xB5, 0x96, 0xB2, 0x1F, 0xF7, 0x45
   157 00000938 BAEAA366C55A082D    <1>     DB      0xBA, 0xEA, 0xA3, 0x66, 0xC5, 0x5A, 0x08, 0x2D
   158                              <1> 
   159                              <1> guidedStructureEnd:
   160                              <1> 
   161                              <1> ALIGN   16
   162                              <1> 
   163                              <1> applicationProcessorEntryPoint:
   164                              <1> ;
   165                              <1> ; Application Processors entry point
   166                              <1> ;
   167                              <1> ; GenFv generates code aligned on a 4k boundary which will jump to this
   168                              <1> ; location.  (0xffffffe0)  This allows the Local APIC Startup IPI to be
   169                              <1> ; used to wake up the application processors.
   170                              <1> ;
   171 00000940 E92AFF              <1>     jmp     EarlyApInitReal16
   172                              <1> 
   173 00000943 90<rept>            <1> ALIGN   8
   174                              <1> 
   175 00000948 00000000            <1>     DD      0
   176                              <1> 
   177                              <1> ;
   178                              <1> ; The VTF signature
   179                              <1> ;
   180                              <1> ; VTF-0 means that the VTF (Volume Top File) code does not require
   181                              <1> ; any fixups.
   182                              <1> ;
   183                              <1> vtfSignature:
   184 0000094C 56544600            <1>     DB      'V', 'T', 'F', 0
   185                              <1> 
   186                              <1> ALIGN   16
   187                              <1> 
   188                              <1> resetVector:
   189                              <1> ;
   190                              <1> ; Reset Vector
   191                              <1> ;
   192                              <1> ; This is where the processor will begin execution
   193                              <1> ;
   194                              <1> ; In IA32 we follow the standard reset vector flow. While in X64, Td guest
   195                              <1> ; may be supported. Td guest requires the startup mode to be 32-bit
   196                              <1> ; protected mode but the legacy VM startup mode is 16-bit real mode.
   197                              <1> ; To make NASM generate such shared entry code that behaves correctly in
   198                              <1> ; both 16-bit and 32-bit mode, more BITS directives are added.
   199                              <1> ;
   200                              <1> %ifdef ARCH_IA32
   201                              <1>     nop
   202                              <1>     nop
   203                              <1>     jmp     EarlyBspInitReal16
   204                              <1> 
   205                              <1> %else
   206                              <1> 
   207 00000950 0F20C0              <1>     mov     eax, cr0
   208 00000953 A801                <1>     test    al, 1
   209 00000955 7405                <1>     jz      .Real
   210                              <1> BITS 32
   211 00000957 E928FFFFFF          <1>     jmp     Main32
   212                              <1> BITS 16
   213                              <1> .Real:
   214 0000095C E909FF              <1>     jmp     EarlyBspInitReal16
   215                              <1> 
   216                              <1> %endif
   217                              <1> 
   218 0000095F 90                  <1> ALIGN   16
   219                              <1> 
   220                              <1> fourGigabytes:
   221                              <1> 
